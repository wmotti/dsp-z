%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (1995-1997 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
%Latex:\begin{picture}(6000,4240)(0,0)
%--use color 0 
0 Setcolor
fillsolid
[] 0 setdash
/WhiteLev 16 def
/Setgray { WhiteLev div setgray } def 
/Setcolor { WhiteLev div setgray } def 
/usecolor 0  def 
%--end use color 0 
/Times-Roman findfont 180 scf mul scalefont setfont
5 Thickness
-1 -1 200000 200000 setclipzone
fillsolid
[] 0 setdash
fillsolid
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
fillsolid
(0) 705 3936 0  0.00 [705 3765 90 170] Show
%Latex:\myput{705}{304}{18}{0}
 (drawsegs) 4 [ 0]
[750 3710 750 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[1200 3710 1200 3741 
] dogrey 
(0.1) 1538 3936 0  0.00 [1538 3765 225 170] Show
%Latex:\myput{1538}{304}{18}{0.1}
 (drawsegs) 4 [ 0]
[1650 3710 1650 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[2100 3710 2100 3741 
] dogrey 
(0.2) 2438 3936 0  0.00 [2438 3765 225 170] Show
%Latex:\myput{2438}{304}{18}{0.2}
 (drawsegs) 4 [ 0]
[2550 3710 2550 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[3000 3710 3000 3741 
] dogrey 
(0.3) 3338 3936 0  0.00 [3338 3765 225 170] Show
%Latex:\myput{3338}{304}{18}{0.3}
 (drawsegs) 4 [ 0]
[3450 3710 3450 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[3900 3710 3900 3741 
] dogrey 
(0.4) 4238 3936 0  0.00 [4238 3765 225 170] Show
%Latex:\myput{4238}{304}{18}{0.4}
 (drawsegs) 4 [ 0]
[4350 3710 4350 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[4800 3710 4800 3741 
] dogrey 
(0.5) 5138 3936 0  0.00 [5138 3765 225 170] Show
%Latex:\myput{5138}{304}{18}{0.5}
 (drawsegs) 4 [ 0]
[5250 3710 5250 3773 
] dogrey 
(0) 588 3775 0  0.00 [588 3604 90 170] Show
%Latex:\myput{588}{465}{18}{0}
 (drawsegs) 4 [ 0]
[750 3710 690 3710 
] dogrey 
 (drawsegs) 4 [ 0]
[750 3445 720 3445 
] dogrey 
(0.2) 453 3245 0  0.00 [453 3074 225 170] Show
%Latex:\myput{453}{995}{18}{0.2}
 (drawsegs) 4 [ 0]
[750 3180 690 3180 
] dogrey 
 (drawsegs) 4 [ 0]
[750 2915 720 2915 
] dogrey 
(0.4) 453 2715 0  0.00 [453 2544 225 170] Show
%Latex:\myput{453}{1525}{18}{0.4}
 (drawsegs) 4 [ 0]
[750 2650 690 2650 
] dogrey 
 (drawsegs) 4 [ 0]
[750 2385 720 2385 
] dogrey 
(0.6) 453 2185 0  0.00 [453 2014 225 170] Show
%Latex:\myput{453}{2055}{18}{0.6}
 (drawsegs) 4 [ 0]
[750 2120 690 2120 
] dogrey 
 (drawsegs) 4 [ 0]
[750 1855 720 1855 
] dogrey 
(0.8) 453 1655 0  0.00 [453 1484 225 170] Show
%Latex:\myput{453}{2585}{18}{0.8}
 (drawsegs) 4 [ 0]
[750 1590 690 1590 
] dogrey 
 (drawsegs) 4 [ 0]
[750 1325 720 1325 
] dogrey 
(1.0) 453 1125 0  0.00 [453 954 225 170] Show
%Latex:\myput{453}{3115}{18}{1.0}
 (drawsegs) 4 [ 0]
[750 1060 690 1060 
] dogrey 
 (drawsegs) 4 [ 0]
[750 795 720 795 
] dogrey 
(1.2) 453 595 0  0.00 [453 424 225 170] Show
%Latex:\myput{453}{3645}{18}{1.2}
 (drawsegs) 4 [ 0]
[750 530 690 530 
] dogrey 
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
[] 0 setdash
/closeflag false def
 (drawpoly) 2000 [ 0]
[750 1060 755 1060 759 1060 764 1060 768 1060 773 1060 777 1060 782 1060 786 1060 791 1060 
795 1060 800 1060 804 1060 809 1060 813 1060 818 1060 822 1060 827 1060 831 1060 836 1060 
840 1060 845 1060 849 1060 854 1060 858 1060 863 1060 867 1060 872 1060 876 1060 881 1060 
885 1060 890 1060 894 1060 899 1060 903 1060 908 1060 912 1060 917 1060 921 1060 926 1060 
930 1060 935 1060 939 1060 944 1060 948 1060 953 1060 957 1060 962 1060 966 1060 971 1060 
975 1060 980 1060 984 1060 989 1060 993 1060 998 1060 1002 1060 1007 1060 1011 1060 1016 1060 
1020 1060 1025 1060 1029 1060 1034 1060 1038 1060 1043 1060 1047 1060 1052 1060 1056 1060 1061 1060 
1065 1060 1070 1060 1074 1060 1079 1060 1083 1060 1088 1060 1092 1060 1097 1060 1101 1060 1106 1060 
1110 1060 1115 1060 1119 1060 1124 1060 1128 1060 1133 1060 1137 1060 1142 1060 1146 1060 1151 1060 
1155 1060 1160 1060 1164 1060 1169 1060 1173 1060 1178 1060 1182 1060 1187 1060 1191 1060 1196 1060 
1200 1060 1205 1060 1209 1060 1214 1060 1218 1060 1223 1060 1227 1060 1232 1060 1236 1060 1241 1060 
1245 1060 1250 1060 1255 1060 1259 1060 1264 1060 1268 1060 1273 1060 1277 1060 1282 1060 1286 1060 
1291 1060 1295 1060 1300 1060 1304 1060 1309 1060 1313 1060 1318 1060 1322 1060 1327 1060 1331 1060 
1336 1060 1340 1060 1345 1060 1349 1060 1354 1060 1358 1060 1363 1060 1367 1060 1372 1060 1376 1060 
1381 1060 1385 1060 1390 1060 1394 1060 1399 1060 1403 1060 1408 1060 1412 1060 1417 1060 1421 1060 
1426 1060 1430 1060 1435 1060 1439 1060 1444 1060 1448 1060 1453 1060 1457 1060 1462 1060 1466 1060 
1471 1060 1475 1060 1480 1060 1484 1060 1489 1060 1493 1060 1498 1060 1502 1060 1507 1060 1511 1060 
1516 1060 1520 1060 1525 1060 1529 1060 1534 1060 1538 1060 1543 1060 1547 1060 1552 1060 1556 1060 
1561 1060 1565 1060 1570 1060 1574 1060 1579 1060 1583 1060 1588 1060 1592 1060 1597 1060 1601 1060 
1606 1060 1610 1060 1615 1060 1619 1060 1624 1060 1628 1060 1633 1060 1637 1060 1642 1060 1646 1060 
1651 1060 1655 1060 1660 1060 1664 1060 1669 1060 1673 1060 1678 1060 1682 1060 1687 1060 1691 1060 
1696 1060 1700 1060 1705 1060 1709 1060 1714 1060 1718 1060 1723 1060 1727 1060 1732 1060 1736 1060 
1741 1060 1745 1060 1750 1060 1755 1061 1759 1061 1764 1061 1768 1061 1773 1061 1777 1061 1782 1061 
1786 1061 1791 1061 1795 1062 1800 1062 1804 1062 1809 1062 1813 1062 1818 1063 1822 1063 1827 1063 
1831 1064 1836 1064 1840 1065 1845 1065 1849 1066 1854 1067 1858 1068 1863 1069 1867 1070 1872 1071 
1876 1073 1881 1074 1885 1076 1890 1078 1894 1081 1899 1083 1903 1087 1908 1090 1912 1094 1917 1099 
1921 1104 1926 1110 1930 1117 1935 1125 1939 1134 1944 1144 1948 1156 1953 1169 1957 1184 1962 1202 
1966 1222 1971 1245 1975 1271 1980 1301 1984 1334 1989 1372 1993 1415 1998 1463 2002 1517 2007 1577 
2011 1643 2016 1715 2020 1794 2025 1878 2029 1968 2034 2064 2038 2163 2043 2266 2047 2371 2052 2477 
2056 2583 2061 2688 2065 2792 2070 2892 2074 2988 2079 3080 2083 3167 2088 3249 2092 3326 2097 3398 
2101 3464 2106 3525 2110 3582 2115 3633 2119 3679 2124 3699 2128 3661 2133 3627 2137 3596 2142 3570 
2146 3546 2151 3525 2155 3508 2160 3492 2164 3480 2169 3469 2173 3461 2178 3454 2182 3450 2187 3447 
2191 3445 2196 3445 2200 3446 2205 3449 2209 3452 2214 3457 2218 3462 2223 3469 2227 3476 2232 3484 
2236 3492 2241 3501 2245 3510 2250 3520 2255 3531 2259 3541 2264 3552 2268 3563 2273 3574 2277 3586 
2282 3598 2286 3609 2291 3621 2295 3633 2300 3645 2304 3656 2309 3668 2313 3680 2318 3691 2322 3703 
2327 3706 2331 3695 2336 3684 2340 3673 2345 3663 2349 3652 2354 3642 2358 3632 2363 3622 2367 3613 
2372 3604 2376 3595 2381 3586 2385 3578 2390 3570 2394 3562 2399 3554 2403 3547 2408 3540 2412 3533 
2417 3526 2421 3520 2426 3514 2430 3508 2435 3503 2439 3498 2444 3493 2448 3488 2453 3484 2457 3479 
2462 3476 2466 3472 2471 3468 2475 3465 2480 3462 2484 3460 2489 3457 2493 3455 2498 3453 2502 3451 
2507 3450 2511 3449 2516 3448 2520 3447 2525 3446 2529 3445 2534 3445 2538 3445 2543 3445 2547 3445 
2552 3446 2556 3446 2561 3447 2565 3448 2570 3449 2574 3450 2579 3452 2583 3453 2588 3455 2592 3457 
2597 3459 2601 3461 2606 3463 2610 3465 2615 3468 2619 3471 2624 3473 2628 3476 2633 3479 2637 3482 
2642 3485 2646 3488 2651 3492 2655 3495 2660 3498 2664 3502 2669 3506 2673 3509 2678 3513 2682 3517 
2687 3521 2691 3525 2696 3529 2700 3533 2705 3537 2709 3541 2714 3545 2718 3550 2723 3554 2727 3558 
2732 3563 2736 3567 2741 3572 2745 3576 2750 3581 2755 3585 2759 3590 2764 3594 2768 3599 2773 3603 
2777 3608 2782 3613 2786 3617 2791 3622 2795 3627 2800 3631 2804 3636 2809 3641 2813 3645 2818 3650 
2822 3655 2827 3659 2831 3664 2836 3669 2840 3673 2845 3678 2849 3683 2854 3687 2858 3692 2863 3696 
2867 3701 2872 3705 2876 3710 2881 3706 2885 3701 2890 3697 2894 3692 2899 3688 2903 3684 2908 3679 
2912 3675 2917 3671 2921 3666 2926 3662 2930 3658 2935 3654 2939 3650 2944 3646 2948 3642 2953 3638 
2957 3634 2962 3630 2966 3626 2971 3622 2975 3618 2980 3614 2984 3611 2989 3607 2993 3603 2998 3600 
3002 3596 3007 3592 3011 3589 3016 3585 3020 3582 3025 3579 3029 3575 3034 3572 3038 3569 3043 3566 
3047 3562 3052 3559 3056 3556 3061 3553 3065 3550 3070 3547 3074 3544 3079 3541 3083 3539 3088 3536 
3092 3533 3097 3530 3101 3528 3106 3525 3110 3523 3115 3520 3119 3518 3124 3515 3128 3513 3133 3511 
3137 3508 3142 3506 3146 3504 3151 3502 3155 3500 3160 3497 3164 3495 3169 3493 3173 3492 3178 3490 
3182 3488 3187 3486 3191 3484 3196 3482 3200 3481 3205 3479 3209 3478 3214 3476 3218 3474 3223 3473 
3227 3472 3232 3470 3236 3469 3241 3467 3245 3466 3250 3465 3255 3464 3259 3463 3264 3462 3268 3460 
3273 3459 3277 3458 3282 3457 3286 3457 3291 3456 3295 3455 3300 3454 3304 3453 3309 3452 3313 3452 
3318 3451 3322 3450 3327 3450 3331 3449 3336 3449 3340 3448 3345 3448 3349 3447 3354 3447 3358 3447 
3363 3446 3367 3446 3372 3446 3376 3446 3381 3445 3385 3445 3390 3445 3394 3445 3399 3445 3403 3445 
3408 3445 3412 3445 3417 3445 3421 3445 3426 3445 3430 3445 3435 3446 3439 3446 3444 3446 3448 3446 
3453 3447 3457 3447 3462 3447 3466 3448 3471 3448 3475 3449 3480 3449 3484 3450 3489 3450 3493 3451 
3498 3451 3502 3452 3507 3452 3511 3453 3516 3454 3520 3454 3525 3455 3529 3456 3534 3457 3538 3457 
3543 3458 3547 3459 3552 3460 3556 3461 3561 3462 3565 3463 3570 3464 3574 3465 3579 3466 3583 3467 
3588 3468 3592 3469 3597 3470 3601 3471 3606 3472 3610 3473 3615 3474 3619 3475 3624 3476 3628 3478 
3633 3479 3637 3480 3642 3481 3646 3483 3651 3484 3655 3485 3660 3487 3664 3488 3669 3489 3673 3491 
3678 3492 3682 3493 3687 3495 3691 3496 3696 3498 3700 3499 3705 3501 3709 3502 3714 3504 3718 3505 
3723 3507 3727 3508 3732 3510 3736 3511 3741 3513 3745 3515 3750 3516 3755 3518 3759 3519 3764 3521 
3768 3523 3773 3524 3777 3526 3782 3528 3786 3529 3791 3531 3795 3533 3800 3535 3804 3536 3809 3538 
3813 3540 3818 3542 3822 3543 3827 3545 3831 3547 3836 3549 3840 3551 3845 3552 3849 3554 3854 3556 
3858 3558 3863 3560 3867 3562 3872 3564 3876 3565 3881 3567 3885 3569 3890 3571 3894 3573 3899 3575 
3903 3577 3908 3579 3912 3581 3917 3583 3921 3585 3926 3586 3930 3588 3935 3590 3939 3592 3944 3594 
3948 3596 3953 3598 3957 3600 3962 3602 3966 3604 3971 3606 3975 3608 3980 3610 3984 3612 3989 3614 
3993 3616 3998 3618 4002 3620 4007 3622 4011 3624 4016 3626 4020 3628 4025 3630 4029 3632 4034 3634 
4038 3636 4043 3638 4047 3640 4052 3642 4056 3644 4061 3646 4065 3648 4070 3650 4074 3653 4079 3655 
4083 3657 4088 3659 4092 3661 4097 3663 4101 3665 4106 3667 4110 3669 4115 3671 4119 3673 4124 3675 
4128 3677 4133 3679 4137 3681 4142 3683 4146 3685 4151 3687 4155 3689 4160 3691 4164 3693 4169 3695 
4173 3697 4178 3699 4182 3701 4187 3703 4191 3705 4196 3707 4200 3709 4205 3709 4209 3707 4214 3705 
4218 3703 4223 3701 4227 3699 4232 3697 4236 3695 4241 3693 4245 3691 4250 3689 4255 3687 4259 3685 
4264 3683 4268 3681 4273 3679 4277 3677 4282 3675 4286 3674 4291 3672 4295 3670 4300 3668 4304 3666 
4309 3664 4313 3662 4318 3660 4322 3658 4327 3656 4331 3654 4336 3653 4340 3651 4345 3649 4349 3647 
4354 3645 4358 3643 4363 3641 4367 3640 4372 3638 4376 3636 4381 3634 4385 3632 4390 3631 4394 3629 
4399 3627 4403 3625 4408 3623 4412 3622 4417 3620 4421 3618 4426 3616 4430 3615 4435 3613 4439 3611 
4444 3609 4448 3608 4453 3606 4457 3604 4462 3602 4466 3601 4471 3599 4475 3597 4480 3596 4484 3594 
4489 3592 4493 3591 4498 3589 4502 3587 4507 3586 4511 3584 4516 3583 4520 3581 4525 3579 4529 3578 
4534 3576 4538 3575 4543 3573 4547 3572 4552 3570 4556 3568 4561 3567 4565 3565 4570 3564 4574 3562 
4579 3561 4583 3559 4588 3558 4592 3556 4597 3555 4601 3553 4606 3552 4610 3551 4615 3549 4619 3548 
4624 3546 4628 3545 4633 3543 4637 3542 4642 3541 4646 3539 4651 3538 4655 3537 4660 3535 4664 3534 
4669 3533 4673 3531 4678 3530 4682 3529 4687 3527 4691 3526 4696 3525 4700 3524 4705 3522 4709 3521 
4714 3520 4718 3519 4723 3517 4727 3516 4732 3515 4736 3514 4741 3513 4745 3511 4750 3510 4755 3509 
4759 3508 4764 3507 4768 3506 4773 3505 4777 3504 4782 3502 4786 3501 4791 3500 4795 3499 4800 3498 
4804 3497 4809 3496 4813 3495 4818 3494 4822 3493 4827 3492 4831 3491 4836 3490 4840 3489 4845 3488 
4849 3487 4854 3486 4858 3485 4863 3484 4867 3484 4872 3483 4876 3482 4881 3481 4885 3480 4890 3479 
4894 3478 4899 3478 4903 3477 4908 3476 4912 3475 4917 3474 4921 3474 4926 3473 4930 3472 4935 3471 
4939 3470 4944 3470 4948 3469 4953 3468 4957 3468 4962 3467 4966 3466 4971 3466 4975 3465 4980 3464 
4984 3464 4989 3463 4993 3462 4998 3462 5002 3461 5007 3461 5011 3460 5016 3460 5020 3459 5025 3458 
5029 3458 5034 3457 5038 3457 5043 3456 5047 3456 5052 3455 5056 3455 5061 3454 5065 3454 5070 3454 
5074 3453 5079 3453 5083 3452 5088 3452 5092 3452 5097 3451 5101 3451 5106 3451 5110 3450 5115 3450 
5119 3450 5124 3449 5128 3449 5133 3449 5137 3448 5142 3448 5146 3448 5151 3448 5155 3447 5160 3447 
5164 3447 5169 3447 5173 3447 5178 3446 5182 3446 5187 3446 5191 3446 5196 3446 5200 3446 5205 3446 
5209 3445 5214 3445 5218 3445 5223 3445 5227 3445 5232 3445 5236 3445 5241 3445 5245 3445 5250 3445 
] dogrey 
fillsolid
/absolu true def
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
(frequenza) 5270 3493 0  0.00 [5270 3322 709 170] Show
%Latex:\myput{5270}{747}{18}{frequenza}
(|H\(w\)|) 899 446 0  0.00 [899 275 451 170] Show
%Latex:\myput{899}{3794}{18}{|H(w)|}
%Latex:\end{picture}
 showpage

 end saved restore 

