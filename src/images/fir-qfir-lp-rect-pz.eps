%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 212 300
%%
%%Scilab Postscript File (1995-1997 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
% Dessin en bas a gauche de taille 3000,2120
90 rotate 0 600 neg translate [0.5 10 div 0 0 0.5 10 div neg  0 3000 5 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
%Latex:\begin{picture}(6000,4240)(0,0)
%--use color 0 
0 Setcolor
fillsolid
[] 0 setdash
/WhiteLev 16 def
/Setgray { WhiteLev div setgray } def 
/Setcolor { WhiteLev div setgray } def 
/usecolor 0  def 
%--end use color 0 
/Times-Roman findfont 100 scf mul scalefont setfont
5 Thickness
-1 -1 200000 200000 setclipzone
fillsolid
[] 0 setdash
fillsolid
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
fillsolid
(-1.9) 671 3869 0  0.00 [671 3774 158 94] Show
%Latex:\myput{671}{371}{10}{-1.9}
 (drawsegs) 4 [ 0]
[750 3710 750 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[975 3710 975 3741 
] dogrey 
(-1.5) 1121 3869 0  0.00 [1121 3774 158 94] Show
%Latex:\myput{1121}{371}{10}{-1.5}
 (drawsegs) 4 [ 0]
[1200 3710 1200 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[1425 3710 1425 3741 
] dogrey 
(-1.1) 1571 3869 0  0.00 [1571 3774 158 94] Show
%Latex:\myput{1571}{371}{10}{-1.1}
 (drawsegs) 4 [ 0]
[1650 3710 1650 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[1875 3710 1875 3741 
] dogrey 
(-0.7) 2021 3869 0  0.00 [2021 3774 158 94] Show
%Latex:\myput{2021}{371}{10}{-0.7}
 (drawsegs) 4 [ 0]
[2100 3710 2100 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[2325 3710 2325 3741 
] dogrey 
(-0.3) 2471 3869 0  0.00 [2471 3774 158 94] Show
%Latex:\myput{2471}{371}{10}{-0.3}
 (drawsegs) 4 [ 0]
[2550 3710 2550 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[2775 3710 2775 3741 
] dogrey 
(0.1) 2938 3869 0  0.00 [2938 3774 125 94] Show
%Latex:\myput{2938}{371}{10}{0.1}
 (drawsegs) 4 [ 0]
[3000 3710 3000 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[3225 3710 3225 3741 
] dogrey 
(0.5) 3388 3869 0  0.00 [3388 3774 125 94] Show
%Latex:\myput{3388}{371}{10}{0.5}
 (drawsegs) 4 [ 0]
[3450 3710 3450 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[3675 3710 3675 3741 
] dogrey 
(0.9) 3838 3869 0  0.00 [3838 3774 125 94] Show
%Latex:\myput{3838}{371}{10}{0.9}
 (drawsegs) 4 [ 0]
[3900 3710 3900 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[4125 3710 4125 3741 
] dogrey 
(1.3) 4288 3869 0  0.00 [4288 3774 125 94] Show
%Latex:\myput{4288}{371}{10}{1.3}
 (drawsegs) 4 [ 0]
[4350 3710 4350 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[4575 3710 4575 3741 
] dogrey 
(1.7) 4738 3869 0  0.00 [4738 3774 125 94] Show
%Latex:\myput{4738}{371}{10}{1.7}
 (drawsegs) 4 [ 0]
[4800 3710 4800 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[5025 3710 5025 3741 
] dogrey 
(2.1) 5188 3869 0  0.00 [5188 3774 125 94] Show
%Latex:\myput{5188}{371}{10}{2.1}
 (drawsegs) 4 [ 0]
[5250 3710 5250 3773 
] dogrey 
(-1.2) 520 3746 0  0.00 [520 3651 158 94] Show
%Latex:\myput{520}{494}{10}{-1.2}
 (drawsegs) 4 [ 0]
[750 3710 690 3710 
] dogrey 
 (drawsegs) 4 [ 0]
[750 3445 720 3445 
] dogrey 
(-0.8) 520 3216 0  0.00 [520 3121 158 94] Show
%Latex:\myput{520}{1024}{10}{-0.8}
 (drawsegs) 4 [ 0]
[750 3180 690 3180 
] dogrey 
 (drawsegs) 4 [ 0]
[750 2915 720 2915 
] dogrey 
(-0.4) 520 2686 0  0.00 [520 2591 158 94] Show
%Latex:\myput{520}{1554}{10}{-0.4}
 (drawsegs) 4 [ 0]
[750 2650 690 2650 
] dogrey 
 (drawsegs) 4 [ 0]
[750 2385 720 2385 
] dogrey 
(0) 628 2156 0  0.00 [628 2061 50 94] Show
%Latex:\myput{628}{2084}{10}{0}
 (drawsegs) 4 [ 0]
[750 2120 690 2120 
] dogrey 
 (drawsegs) 4 [ 0]
[750 1855 720 1855 
] dogrey 
(0.4) 553 1626 0  0.00 [553 1531 125 94] Show
%Latex:\myput{553}{2614}{10}{0.4}
 (drawsegs) 4 [ 0]
[750 1590 690 1590 
] dogrey 
 (drawsegs) 4 [ 0]
[750 1325 720 1325 
] dogrey 
(0.8) 553 1096 0  0.00 [553 1001 125 94] Show
%Latex:\myput{553}{3144}{10}{0.8}
 (drawsegs) 4 [ 0]
[750 1060 690 1060 
] dogrey 
 (drawsegs) 4 [ 0]
[750 795 720 795 
] dogrey 
(1.2) 553 566 0  0.00 [553 471 125 94] Show
%Latex:\myput{553}{3674}{10}{1.2}
 (drawsegs) 4 [ 0]
[750 530 690 530 
] dogrey 
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
[] 0 setdash
/closeflag false def
 (drawpoly) 2 [ 0]
[2887 2120 
] dogrey 
fillsolid
/absolu true def
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
[] 0 setdash
fillsolid
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#4f put
 (drawpolymark) 398 [ 0]
[1764 2060 1764 2180 1762 2120 1763 2120 1763 2120 1766 2018 1766 2222 1769 1976 1769 2264 1774 1934 
1774 2306 1779 1893 1779 2347 1786 1852 1786 2388 1793 1811 1793 2429 1802 1771 1802 2469 1812 1731 
1812 2509 1823 1691 1823 2549 1835 1652 1835 2588 1848 1613 1848 2627 1862 1575 1862 2665 1877 1537 
1877 2703 1893 1500 1893 2740 1910 1464 1910 2776 1928 1428 1928 2812 1947 1393 1947 2847 1967 1358 
1967 2882 1988 1325 1988 2915 2009 1292 2009 2948 2032 1260 2032 2980 2055 1229 2055 3011 2079 1198 
2079 3042 2104 1169 2104 3071 2130 1140 2130 3100 2157 1113 2157 3127 2184 1086 2184 3154 2212 1061 
2212 3179 2240 1036 2240 3204 2269 1013 2269 3227 2299 991 2299 3249 2330 969 2330 3271 2360 949 
2360 3291 2392 931 2392 3309 2424 913 2424 3327 2456 896 2456 3344 2593 790 2593 3450 2488 881 
2488 3359 2519 868 2519 3372 2665 762 2665 3478 2738 743 2738 3497 2614 884 2614 3356 2812 731 
2812 3509 2683 874 2683 3366 2886 725 2886 3515 2751 866 2751 3374 2961 726 2961 3514 2819 862 
2819 3378 3035 732 3035 3508 2886 861 2886 3379 3109 744 3109 3496 3183 762 3183 3478 4085 2120 
4082 2031 4082 2209 4075 1943 4075 2297 4064 1856 4064 2384 4047 1769 4047 2471 4026 1684 4026 2556 
4000 1601 4000 2639 3970 1520 3970 2720 3936 1441 3936 2799 3897 1365 3897 2875 3945 2120 3942 2042 
3942 2198 3936 1964 3936 2276 3926 1887 3926 2353 3911 1810 3911 2430 3893 1735 3893 2505 3855 1292 
3855 2948 3871 1661 3871 2579 3255 786 3255 3454 3844 1590 3844 2650 3809 1222 3809 3018 3814 1520 
3814 2720 3326 815 3326 3425 3759 1156 3759 3084 3781 1452 3781 2788 3705 1094 3705 3146 3743 1387 
3743 2853 3395 849 3395 3391 3462 888 3462 3352 3527 933 3527 3307 3589 982 3589 3258 3649 1036 
3649 3204 3703 1325 3703 2915 3659 1266 3659 2974 3612 1211 3612 3029 3563 1158 3563 3082 3510 1110 
3510 3130 3455 1065 3455 3175 2953 866 2953 3374 3398 1025 3398 3215 3020 875 3020 3365 3339 989 
3339 3251 3086 888 3086 3352 3278 957 3278 3283 3151 907 3151 3333 3215 929 3215 3311 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
[] 0 setdash
fillsolid
fillsolid
(Zeros) 1200 4229 0  0.00 [1200 4134 227 94] Show
%Latex:\myput{1200}{11}{10}{Zeros}
fillsolid
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#4f put
 (drawpolymark) 2 [ 0]
[1125 4193 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
[] 0 setdash
fillsolid
[] 0 setdash
[] 0 setdash
fillsolid
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#b4 put
 (drawpolymark) 398 [ 0]
[1934 2101 1934 2139 1935 2063 1935 2177 1937 2026 1937 2214 1940 1988 1940 2252 1944 1950 1944 2290 
1950 1913 1950 2327 1956 1876 1956 2364 1964 1839 1964 2401 1973 1803 1973 2437 1983 1767 1983 2473 
1994 1732 1994 2508 2007 1698 2007 2542 2020 1664 2020 2576 2034 1631 2034 2609 2048 1599 2048 2641 
2064 1568 2064 2672 2080 1537 2080 2703 2181 2120 2097 1506 2097 2734 2115 1476 2115 2764 2135 1447 
2135 2793 2156 1418 2156 2822 2178 1391 2178 2849 2202 1364 2202 2876 2227 1335 2227 2905 2251 1306 
2251 2934 2246 1377 2246 2863 2274 1280 2274 2960 2298 1256 2298 2984 2323 1233 2323 3007 2348 1211 
2348 3029 2374 1191 2374 3049 2400 1171 2400 3069 2427 1153 2427 3087 2455 1136 2455 3104 2483 1120 
2483 3120 2512 1106 2512 3134 2541 1093 2541 3147 2570 1081 2570 3159 2600 1071 2600 3169 2631 1062 
2631 3178 2662 1054 2662 3186 2693 1047 2693 3193 2724 1042 2724 3198 2755 1037 2755 3203 2735 1157 
2735 3083 2786 1034 2786 3206 2816 1034 2816 3206 2843 1033 2843 3207 2870 1030 2870 3210 2900 1027 
2900 3213 2930 1026 2930 3214 2961 1027 2961 3213 2992 1031 2992 3209 3023 1037 3023 3203 3054 1045 
3054 3195 3087 1061 3087 3179 3089 1070 3089 3170 3125 1063 3125 3177 3155 1070 3155 3170 3185 1079 
3185 3161 3215 1089 3215 3151 3244 1101 3244 3139 3272 1115 3272 3125 3301 1130 3301 3110 3328 1146 
3328 3094 3355 1163 3355 3077 3382 1181 3382 3059 3408 1201 3408 3039 3433 1222 3433 3018 3458 1243 
3458 2997 3481 1266 3481 2974 3504 1290 3504 2950 3526 1315 3526 2925 3547 1340 3547 2900 3567 1365 
3567 2875 3587 1391 3587 2849 3607 1417 3607 2823 3626 1445 3626 2795 3644 1474 3644 2766 3662 1504 
3662 2736 3678 1536 3678 2704 3693 1568 3693 2672 3708 1601 3708 2639 3722 1636 3722 2604 3736 1670 
3736 2570 3750 1704 3750 2536 3762 1738 3762 2502 3773 1773 3773 2467 3782 1808 3782 2432 3790 1843 
3790 2397 3796 1878 3796 2362 3802 1912 3802 2328 3806 1945 3806 2295 3811 1979 3811 2261 3819 2048 
3819 2192 3815 2013 3815 2227 3821 2084 3821 2156 3822 2120 3663 1673 3663 2567 2885 2120 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
[] 0 setdash
fillsolid
fillsolid
(Poles) 3450 4229 0  0.00 [3450 4134 216 94] Show
%Latex:\myput{3450}{11}{10}{Poles}
fillsolid
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#b4 put
 (drawpolymark) 2 [ 0]
[3375 4193 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
[] 0 setdash
fillsolid
[] 0 setdash
[] 0 setdash
fillsolid
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
[80 30 20 30 ] 0 setdash
/closeflag false def
 (drawpoly) 4 [ 0]
[973 2120 4881 2120 
] dogrey 
fillsolid
/absolu true def
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
[] 0 setdash
fillsolid
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
[80 30 20 30 ] 0 setdash
/closeflag false def
 (drawpoly) 4 [ 0]
[2887 3654 2887 586 
] dogrey 
fillsolid
/absolu true def
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
 (fillarc) 6 [ 17]
[1762 795 2250 2650 0 23040 
] dogrey 
fillsolid
(transmission zeros and poles) 2426 292 0  0.00 [2426 197 1147 94] Show
%Latex:\myput{2426}{3948}{10}{transmission zeros and poles}
(real axis) 5457 3472 0  0.00 [5457 3377 336 94] Show
%Latex:\myput{5457}{768}{10}{real axis}
(imag. axis) 919 424 0  0.00 [919 329 411 94] Show
%Latex:\myput{919}{3816}{10}{imag. axis}
%Latex:\end{picture}
 showpage

 end saved restore 

