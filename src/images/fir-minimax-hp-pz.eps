%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (1995-1997 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
%Latex:\begin{picture}(6000,4240)(0,0)
%--use color 0 
0 Setcolor
fillsolid
[] 0 setdash
/WhiteLev 16 def
/Setgray { WhiteLev div setgray } def 
/Setcolor { WhiteLev div setgray } def 
/usecolor 0  def 
%--end use color 0 
/Times-Roman findfont 100 scf mul scalefont setfont
5 Thickness
-1 -1 200000 200000 setclipzone
fillsolid
[] 0 setdash
fillsolid
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
fillsolid
(-3) 709 3869 0  0.00 [709 3774 83 94] Show
%Latex:\myput{709}{371}{10}{-3}
 (drawsegs) 4 [ 0]
[750 3710 750 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[1200 3710 1200 3741 
] dogrey 
(-2) 1609 3869 0  0.00 [1609 3774 83 94] Show
%Latex:\myput{1609}{371}{10}{-2}
 (drawsegs) 4 [ 0]
[1650 3710 1650 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[2100 3710 2100 3741 
] dogrey 
(-1) 2509 3869 0  0.00 [2509 3774 83 94] Show
%Latex:\myput{2509}{371}{10}{-1}
 (drawsegs) 4 [ 0]
[2550 3710 2550 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[3000 3710 3000 3741 
] dogrey 
(0) 3425 3869 0  0.00 [3425 3774 50 94] Show
%Latex:\myput{3425}{371}{10}{0}
 (drawsegs) 4 [ 0]
[3450 3710 3450 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[3900 3710 3900 3741 
] dogrey 
(1) 4325 3869 0  0.00 [4325 3774 50 94] Show
%Latex:\myput{4325}{371}{10}{1}
 (drawsegs) 4 [ 0]
[4350 3710 4350 3773 
] dogrey 
 (drawsegs) 4 [ 0]
[4800 3710 4800 3741 
] dogrey 
(2) 5225 3869 0  0.00 [5225 3774 50 94] Show
%Latex:\myput{5225}{371}{10}{2}
 (drawsegs) 4 [ 0]
[5250 3710 5250 3773 
] dogrey 
(-1.4) 520 3746 0  0.00 [520 3651 158 94] Show
%Latex:\myput{520}{494}{10}{-1.4}
 (drawsegs) 4 [ 0]
[750 3710 690 3710 
] dogrey 
 (drawsegs) 4 [ 0]
[750 3483 720 3483 
] dogrey 
(-1.0) 520 3292 0  0.00 [520 3197 158 94] Show
%Latex:\myput{520}{948}{10}{-1.0}
 (drawsegs) 4 [ 0]
[750 3256 690 3256 
] dogrey 
 (drawsegs) 4 [ 0]
[750 3029 720 3029 
] dogrey 
(-0.6) 520 2837 0  0.00 [520 2742 158 94] Show
%Latex:\myput{520}{1403}{10}{-0.6}
 (drawsegs) 4 [ 0]
[750 2801 690 2801 
] dogrey 
 (drawsegs) 4 [ 0]
[750 2574 720 2574 
] dogrey 
(-0.2) 520 2383 0  0.00 [520 2288 158 94] Show
%Latex:\myput{520}{1857}{10}{-0.2}
 (drawsegs) 4 [ 0]
[750 2347 690 2347 
] dogrey 
 (drawsegs) 4 [ 0]
[750 2120 720 2120 
] dogrey 
(0.2) 553 1929 0  0.00 [553 1834 125 94] Show
%Latex:\myput{553}{2311}{10}{0.2}
 (drawsegs) 4 [ 0]
[750 1893 690 1893 
] dogrey 
 (drawsegs) 4 [ 0]
[750 1666 720 1666 
] dogrey 
(0.6) 553 1475 0  0.00 [553 1380 125 94] Show
%Latex:\myput{553}{2765}{10}{0.6}
 (drawsegs) 4 [ 0]
[750 1439 690 1439 
] dogrey 
 (drawsegs) 4 [ 0]
[750 1211 720 1211 
] dogrey 
(1.0) 553 1020 0  0.00 [553 925 125 94] Show
%Latex:\myput{553}{3220}{10}{1.0}
 (drawsegs) 4 [ 0]
[750 984 690 984 
] dogrey 
 (drawsegs) 4 [ 0]
[750 757 720 757 
] dogrey 
(1.4) 553 566 0  0.00 [553 471 125 94] Show
%Latex:\myput{553}{3674}{10}{1.4}
 (drawsegs) 4 [ 0]
[750 530 690 530 
] dogrey 
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
[] 0 setdash
/closeflag false def
 (drawpoly) 2 [ 0]
[3450 2120 
] dogrey 
fillsolid
/absolu true def
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
[] 0 setdash
fillsolid
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#4f put
 (drawpolymark) 64 [ 0]
[2935 832 2935 3408 3325 725 3325 3515 4345 2004 4345 2236 4307 1775 4307 2465 4233 1561 4233 2679 
4125 1369 4125 2871 3988 1209 3988 3031 3826 1088 3826 3152 3660 1015 3660 3225 2591 1145 2591 3095 
2240 2120 2349 1611 2349 2629 3368 1207 3368 3033 3131 1321 3131 2919 2929 1528 2929 2712 2781 2120 
2801 1820 2801 2420 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
[] 0 setdash
fillsolid
fillsolid
(Zeros) 1200 4229 0  0.00 [1200 4134 227 94] Show
%Latex:\myput{1200}{11}{10}{Zeros}
fillsolid
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#4f put
 (drawpolymark) 2 [ 0]
[1125 4193 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
[] 0 setdash
fillsolid
[] 0 setdash
[] 0 setdash
fillsolid
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#b4 put
 (drawpolymark) 64 [ 0]
[3733 2120 3727 2050 3727 2190 3711 1983 3711 2257 3685 1920 3685 2320 3649 1866 3649 2374 3605 1821 
3605 2419 3555 1788 3555 2452 3501 1770 3501 2470 3445 1765 3445 2475 3390 1774 3390 2466 3338 1797 
3338 2443 3177 2120 3182 2055 3182 2185 3196 1992 3196 2248 3219 1932 3219 2308 3291 1832 3291 2408 
3251 1878 3251 2362 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
[] 0 setdash
fillsolid
fillsolid
(Poles) 3450 4229 0  0.00 [3450 4134 216 94] Show
%Latex:\myput{3450}{11}{10}{Poles}
fillsolid
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#b4 put
 (drawpolymark) 2 [ 0]
[3375 4193 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
[] 0 setdash
fillsolid
[] 0 setdash
[] 0 setdash
fillsolid
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
[80 30 20 30 ] 0 setdash
/closeflag false def
 (drawpoly) 4 [ 0]
[1455 2120 5103 2120 
] dogrey 
fillsolid
/absolu true def
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
[] 0 setdash
fillsolid
[] 0 setdash
fillsolid
750 530 4500 3180 setclipzone
[80 30 20 30 ] 0 setdash
/closeflag false def
 (drawpoly) 4 [ 0]
[3450 3654 3450 586 
] dogrey 
fillsolid
/absolu true def
[] 0 setdash
fillsolid
-1 -1 200000 200000 setclipzone
 (fillarc) 6 [ 17]
[2550 984 1800 2271 0 23040 
] dogrey 
fillsolid
(transmission zeros and poles) 2426 292 0  0.00 [2426 197 1147 94] Show
%Latex:\myput{2426}{3948}{10}{transmission zeros and poles}
(real axis) 5457 3472 0  0.00 [5457 3377 336 94] Show
%Latex:\myput{5457}{768}{10}{real axis}
(imag. axis) 919 424 0  0.00 [919 329 411 94] Show
%Latex:\myput{919}{3816}{10}{imag. axis}
%Latex:\end{picture}
 showpage

 end saved restore 

