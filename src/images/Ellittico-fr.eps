%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (Copyright 1995-2003 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
(0.0) 688 3869 0  0.00 [688 3774 125 94] Show
%Latex:\myput{688}{371}{5}{0.0}
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[1200 3710 1200 3741 
] dogrey 
(0.1) 1588 3869 0  0.00 [1588 3774 125 94] Show
%Latex:\myput{1588}{371}{5}{0.1}
 (drawsegs) 4 [ 32]
[1650 3710 1650 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[2100 3710 2100 3741 
] dogrey 
(0.2) 2488 3869 0  0.00 [2488 3774 125 94] Show
%Latex:\myput{2488}{371}{5}{0.2}
 (drawsegs) 4 [ 32]
[2550 3710 2550 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[3000 3710 3000 3741 
] dogrey 
(0.3) 3388 3869 0  0.00 [3388 3774 125 94] Show
%Latex:\myput{3388}{371}{5}{0.3}
 (drawsegs) 4 [ 32]
[3450 3710 3450 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[3900 3710 3900 3741 
] dogrey 
(0.4) 4288 3869 0  0.00 [4288 3774 125 94] Show
%Latex:\myput{4288}{371}{5}{0.4}
 (drawsegs) 4 [ 32]
[4350 3710 4350 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[4800 3710 4800 3741 
] dogrey 
(0.5) 5188 3869 0  0.00 [5188 3774 125 94] Show
%Latex:\myput{5188}{371}{5}{0.5}
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
(0.000) 453 3746 0  0.00 [453 3651 225 94] Show
%Latex:\myput{453}{494}{5}{0.000}
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3445 720 3445 
] dogrey 
(0.183) 453 3216 0  0.00 [453 3121 225 94] Show
%Latex:\myput{453}{1024}{5}{0.183}
 (drawsegs) 4 [ 32]
[750 3180 690 3180 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2915 720 2915 
] dogrey 
(0.367) 453 2686 0  0.00 [453 2591 225 94] Show
%Latex:\myput{453}{1554}{5}{0.367}
 (drawsegs) 4 [ 32]
[750 2650 690 2650 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2385 720 2385 
] dogrey 
(0.550) 453 2156 0  0.00 [453 2061 225 94] Show
%Latex:\myput{453}{2084}{5}{0.550}
 (drawsegs) 4 [ 32]
[750 2120 690 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1855 720 1855 
] dogrey 
(0.733) 453 1626 0  0.00 [453 1531 225 94] Show
%Latex:\myput{453}{2614}{5}{0.733}
 (drawsegs) 4 [ 32]
[750 1590 690 1590 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1325 720 1325 
] dogrey 
(0.917) 453 1096 0  0.00 [453 1001 225 94] Show
%Latex:\myput{453}{3144}{5}{0.917}
 (drawsegs) 4 [ 32]
[750 1060 690 1060 
] dogrey 
 (drawsegs) 4 [ 32]
[750 795 720 795 
] dogrey 
(1.100) 453 566 0  0.00 [453 471 225 94] Show
%Latex:\myput{453}{3674}{5}{1.100}
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
[] 0 setdash
32 Setcolor
0 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 2000 [ 0]
[750 1108 755 1108 759 1108 764 1108 768 1108 773 1108 777 1108 782 1107 786 1107 791 1107 
795 1106 800 1106 804 1106 809 1105 813 1105 818 1104 822 1104 827 1103 831 1103 836 1102 
840 1101 845 1101 849 1100 854 1099 858 1098 863 1098 867 1097 872 1096 876 1095 881 1094 
885 1093 890 1092 894 1091 899 1090 903 1089 908 1088 912 1086 917 1085 921 1084 926 1083 
930 1081 935 1080 939 1079 944 1077 948 1076 953 1074 957 1073 962 1071 966 1070 971 1068 
975 1067 980 1065 984 1063 989 1061 993 1060 998 1058 1002 1056 1007 1054 1011 1052 1016 1051 
1020 1049 1025 1047 1029 1045 1034 1043 1038 1041 1043 1039 1047 1037 1052 1035 1056 1032 1061 1030 
1065 1028 1070 1026 1074 1024 1079 1021 1083 1019 1088 1017 1092 1014 1097 1012 1101 1010 1106 1007 
1110 1005 1115 1003 1119 1000 1124 998 1128 995 1133 993 1137 990 1142 988 1146 985 1151 982 
1155 980 1160 977 1164 975 1169 972 1173 969 1178 967 1182 964 1187 961 1191 959 1196 956 
1200 953 1205 951 1209 948 1214 945 1218 942 1223 940 1227 937 1232 934 1236 931 1241 929 
1245 926 1250 923 1255 920 1259 918 1264 915 1268 912 1273 910 1277 907 1282 904 1286 902 
1291 899 1295 896 1300 894 1304 891 1309 889 1313 886 1318 883 1322 881 1327 878 1331 876 
1336 874 1340 871 1345 869 1349 866 1354 864 1358 862 1363 860 1367 857 1372 855 1376 853 
1381 851 1385 849 1390 847 1394 845 1399 843 1403 841 1408 840 1412 838 1417 836 1421 835 
1426 833 1430 832 1435 830 1439 829 1444 828 1448 827 1453 826 1457 825 1462 824 1466 823 
1471 822 1475 821 1480 821 1484 820 1489 820 1493 820 1498 819 1502 819 1507 819 1511 819 
1516 819 1520 820 1525 820 1529 820 1534 821 1538 822 1543 822 1547 823 1552 824 1556 825 
1561 826 1565 828 1570 829 1574 831 1579 832 1583 834 1588 836 1592 838 1597 840 1601 842 
1606 845 1610 847 1615 850 1619 852 1624 855 1628 858 1633 861 1637 864 1642 868 1646 871 
1651 874 1655 878 1660 882 1664 885 1669 889 1673 893 1678 897 1682 901 1687 906 1691 910 
1696 914 1700 919 1705 923 1709 928 1714 933 1718 937 1723 942 1727 947 1732 952 1736 957 
1741 962 1745 967 1750 972 1755 977 1759 982 1764 987 1768 993 1773 998 1777 1003 1782 1008 
1786 1013 1791 1018 1795 1023 1800 1028 1804 1033 1809 1038 1813 1043 1818 1048 1822 1052 1827 1057 
1831 1061 1836 1066 1840 1070 1845 1074 1849 1078 1854 1081 1858 1085 1863 1088 1867 1091 1872 1094 
1876 1097 1881 1100 1885 1102 1890 1104 1894 1105 1899 1106 1903 1107 1908 1108 1912 1108 1917 1108 
1921 1107 1926 1106 1930 1105 1935 1103 1939 1100 1944 1097 1948 1093 1953 1089 1957 1084 1962 1078 
1966 1072 1971 1065 1975 1057 1980 1049 1984 1039 1989 1029 1993 1018 1998 1007 2002 994 2007 981 
2011 967 2016 952 2020 937 2025 922 2029 906 2034 890 2038 874 2043 860 2047 846 2052 835 
2056 826 2061 820 2065 819 2070 825 2074 837 2079 858 2083 889 2088 931 2092 986 2097 1053 
2101 1134 2106 1227 2110 1331 2115 1446 2119 1568 2124 1695 2128 1825 2133 1956 2137 2085 2142 2212 
2146 2334 2151 2450 2155 2561 2160 2666 2164 2764 2169 2855 2173 2941 2178 3020 2182 3094 2187 3162 
2191 3225 2196 3284 2200 3338 2205 3388 2209 3435 2214 3478 2218 3518 2223 3554 2227 3589 2232 3620 
2236 3650 2241 3677 2245 3702 2250 3694 2255 3672 2259 3652 2264 3633 2268 3616 2273 3599 2277 3584 
2282 3570 2286 3557 2291 3545 2295 3534 2300 3524 2304 3514 2309 3505 2313 3497 2318 3489 2322 3482 
2327 3475 2331 3469 2336 3464 2340 3459 2345 3454 2349 3450 2354 3446 2358 3442 2363 3439 2367 3436 
2372 3434 2376 3432 2381 3430 2385 3428 2390 3426 2394 3425 2399 3424 2403 3423 2408 3422 2412 3422 
2417 3421 2421 3421 2426 3421 2430 3421 2435 3421 2439 3422 2444 3422 2448 3423 2453 3423 2457 3424 
2462 3425 2466 3426 2471 3427 2475 3428 2480 3429 2484 3431 2489 3432 2493 3434 2498 3435 2502 3437 
2507 3438 2511 3440 2516 3442 2520 3444 2525 3445 2529 3447 2534 3449 2538 3451 2543 3453 2547 3455 
2552 3457 2556 3459 2561 3462 2565 3464 2570 3466 2574 3468 2579 3470 2583 3473 2588 3475 2592 3477 
2597 3479 2601 3482 2606 3484 2610 3486 2615 3489 2619 3491 2624 3493 2628 3496 2633 3498 2637 3501 
2642 3503 2646 3505 2651 3508 2655 3510 2660 3513 2664 3515 2669 3517 2673 3520 2678 3522 2682 3525 
2687 3527 2691 3530 2696 3532 2700 3534 2705 3537 2709 3539 2714 3542 2718 3544 2723 3547 2727 3549 
2732 3551 2736 3554 2741 3556 2745 3559 2750 3561 2755 3563 2759 3566 2764 3568 2768 3570 2773 3573 
2777 3575 2782 3578 2786 3580 2791 3582 2795 3585 2800 3587 2804 3589 2809 3591 2813 3594 2818 3596 
2822 3598 2827 3601 2831 3603 2836 3605 2840 3607 2845 3610 2849 3612 2854 3614 2858 3616 2863 3618 
2867 3621 2872 3623 2876 3625 2881 3627 2885 3629 2890 3631 2894 3634 2899 3636 2903 3638 2908 3640 
2912 3642 2917 3644 2921 3646 2926 3648 2930 3650 2935 3652 2939 3654 2944 3656 2948 3658 2953 3660 
2957 3662 2962 3664 2966 3666 2971 3668 2975 3670 2980 3672 2984 3674 2989 3676 2993 3678 2998 3680 
3002 3682 3007 3684 3011 3686 3016 3688 3020 3689 3025 3691 3029 3693 3034 3695 3038 3697 3043 3699 
3047 3701 3052 3702 3056 3704 3061 3706 3065 3708 3070 3709 3074 3709 3079 3707 3083 3705 3088 3704 
3092 3702 3097 3700 3101 3698 3106 3697 3110 3695 3115 3693 3119 3692 3124 3690 3128 3688 3133 3687 
3137 3685 3142 3684 3146 3682 3151 3680 3155 3679 3160 3677 3164 3676 3169 3674 3173 3672 3178 3671 
3182 3669 3187 3668 3191 3666 3196 3665 3200 3663 3205 3662 3209 3660 3214 3659 3218 3657 3223 3656 
3227 3654 3232 3653 3236 3651 3241 3650 3245 3648 3250 3647 3255 3646 3259 3644 3264 3643 3268 3641 
3273 3640 3277 3639 3282 3637 3286 3636 3291 3635 3295 3633 3300 3632 3304 3630 3309 3629 3313 3628 
3318 3627 3322 3625 3327 3624 3331 3623 3336 3621 3340 3620 3345 3619 3349 3617 3354 3616 3358 3615 
3363 3614 3367 3612 3372 3611 3376 3610 3381 3609 3385 3608 3390 3606 3394 3605 3399 3604 3403 3603 
3408 3602 3412 3600 3417 3599 3421 3598 3426 3597 3430 3596 3435 3595 3439 3594 3444 3592 3448 3591 
3453 3590 3457 3589 3462 3588 3466 3587 3471 3586 3475 3585 3480 3584 3484 3582 3489 3581 3493 3580 
3498 3579 3502 3578 3507 3577 3511 3576 3516 3575 3520 3574 3525 3573 3529 3572 3534 3571 3538 3570 
3543 3569 3547 3568 3552 3567 3556 3566 3561 3565 3565 3564 3570 3563 3574 3562 3579 3561 3583 3560 
3588 3559 3592 3558 3597 3557 3601 3556 3606 3555 3610 3555 3615 3554 3619 3553 3624 3552 3628 3551 
3633 3550 3637 3549 3642 3548 3646 3547 3651 3546 3655 3546 3660 3545 3664 3544 3669 3543 3673 3542 
3678 3541 3682 3540 3687 3540 3691 3539 3696 3538 3700 3537 3705 3536 3709 3535 3714 3535 3718 3534 
3723 3533 3727 3532 3732 3531 3736 3531 3741 3530 3745 3529 3750 3528 3755 3527 3759 3527 3764 3526 
3768 3525 3773 3524 3777 3524 3782 3523 3786 3522 3791 3521 3795 3521 3800 3520 3804 3519 3809 3518 
3813 3518 3818 3517 3822 3516 3827 3516 3831 3515 3836 3514 3840 3513 3845 3513 3849 3512 3854 3511 
3858 3511 3863 3510 3867 3509 3872 3509 3876 3508 3881 3507 3885 3507 3890 3506 3894 3505 3899 3505 
3903 3504 3908 3503 3912 3503 3917 3502 3921 3501 3926 3501 3930 3500 3935 3500 3939 3499 3944 3498 
3948 3498 3953 3497 3957 3496 3962 3496 3966 3495 3971 3495 3975 3494 3980 3493 3984 3493 3989 3492 
3993 3492 3998 3491 4002 3491 4007 3490 4011 3489 4016 3489 4020 3488 4025 3488 4029 3487 4034 3487 
4038 3486 4043 3486 4047 3485 4052 3484 4056 3484 4061 3483 4065 3483 4070 3482 4074 3482 4079 3481 
4083 3481 4088 3480 4092 3480 4097 3479 4101 3479 4106 3478 4110 3478 4115 3477 4119 3477 4124 3476 
4128 3476 4133 3475 4137 3475 4142 3474 4146 3474 4151 3473 4155 3473 4160 3472 4164 3472 4169 3471 
4173 3471 4178 3470 4182 3470 4187 3470 4191 3469 4196 3469 4200 3468 4205 3468 4209 3467 4214 3467 
4218 3466 4223 3466 4227 3466 4232 3465 4236 3465 4241 3464 4245 3464 4250 3463 4255 3463 4259 3463 
4264 3462 4268 3462 4273 3461 4277 3461 4282 3461 4286 3460 4291 3460 4295 3459 4300 3459 4304 3459 
4309 3458 4313 3458 4318 3457 4322 3457 4327 3457 4331 3456 4336 3456 4340 3456 4345 3455 4349 3455 
4354 3455 4358 3454 4363 3454 4367 3453 4372 3453 4376 3453 4381 3452 4385 3452 4390 3452 4394 3451 
4399 3451 4403 3451 4408 3450 4412 3450 4417 3450 4421 3449 4426 3449 4430 3449 4435 3448 4439 3448 
4444 3448 4448 3447 4453 3447 4457 3447 4462 3446 4466 3446 4471 3446 4475 3446 4480 3445 4484 3445 
4489 3445 4493 3444 4498 3444 4502 3444 4507 3444 4511 3443 4516 3443 4520 3443 4525 3442 4529 3442 
4534 3442 4538 3442 4543 3441 4547 3441 4552 3441 4556 3440 4561 3440 4565 3440 4570 3440 4574 3439 
4579 3439 4583 3439 4588 3439 4592 3438 4597 3438 4601 3438 4606 3438 4610 3437 4615 3437 4619 3437 
4624 3437 4628 3436 4633 3436 4637 3436 4642 3436 4646 3436 4651 3435 4655 3435 4660 3435 4664 3435 
4669 3434 4673 3434 4678 3434 4682 3434 4687 3434 4691 3433 4696 3433 4700 3433 4705 3433 4709 3433 
4714 3432 4718 3432 4723 3432 4727 3432 4732 3432 4736 3431 4741 3431 4745 3431 4750 3431 4755 3431 
4759 3431 4764 3430 4768 3430 4773 3430 4777 3430 4782 3430 4786 3429 4791 3429 4795 3429 4800 3429 
4804 3429 4809 3429 4813 3428 4818 3428 4822 3428 4827 3428 4831 3428 4836 3428 4840 3428 4845 3427 
4849 3427 4854 3427 4858 3427 4863 3427 4867 3427 4872 3427 4876 3426 4881 3426 4885 3426 4890 3426 
4894 3426 4899 3426 4903 3426 4908 3426 4912 3425 4917 3425 4921 3425 4926 3425 4930 3425 4935 3425 
4939 3425 4944 3425 4948 3424 4953 3424 4957 3424 4962 3424 4966 3424 4971 3424 4975 3424 4980 3424 
4984 3424 4989 3424 4993 3423 4998 3423 5002 3423 5007 3423 5011 3423 5016 3423 5020 3423 5025 3423 
5029 3423 5034 3423 5038 3423 5043 3423 5047 3423 5052 3422 5056 3422 5061 3422 5065 3422 5070 3422 
5074 3422 5079 3422 5083 3422 5088 3422 5092 3422 5097 3422 5101 3422 5106 3422 5110 3422 5115 3422 
5119 3422 5124 3422 5128 3421 5133 3421 5137 3421 5142 3421 5146 3421 5151 3421 5155 3421 5160 3421 
5164 3421 5169 3421 5173 3421 5178 3421 5182 3421 5187 3421 5191 3421 5196 3421 5200 3421 5205 3421 
5209 3421 5214 3421 5218 3421 5223 3421 5227 3421 5232 3421 5236 3421 5241 3421 5245 3421 5250 3421 
] dogrey 
0 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
0 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 2000 [ 0]
[750 1108 755 1108 759 1108 764 1108 768 1108 773 1108 777 1108 782 1107 786 1107 791 1107 
795 1106 800 1106 804 1106 809 1105 813 1105 818 1104 822 1104 827 1103 831 1103 836 1102 
840 1101 845 1101 849 1100 854 1099 858 1098 863 1098 867 1097 872 1096 876 1095 881 1094 
885 1093 890 1092 894 1091 899 1090 903 1089 908 1088 912 1086 917 1085 921 1084 926 1083 
930 1081 935 1080 939 1079 944 1077 948 1076 953 1074 957 1073 962 1071 966 1070 971 1068 
975 1067 980 1065 984 1063 989 1061 993 1060 998 1058 1002 1056 1007 1054 1011 1052 1016 1051 
1020 1049 1025 1047 1029 1045 1034 1043 1038 1041 1043 1039 1047 1037 1052 1035 1056 1032 1061 1030 
1065 1028 1070 1026 1074 1024 1079 1021 1083 1019 1088 1017 1092 1014 1097 1012 1101 1010 1106 1007 
1110 1005 1115 1003 1119 1000 1124 998 1128 995 1133 993 1137 990 1142 988 1146 985 1151 982 
1155 980 1160 977 1164 975 1169 972 1173 969 1178 967 1182 964 1187 961 1191 959 1196 956 
1200 953 1205 951 1209 948 1214 945 1218 942 1223 940 1227 937 1232 934 1236 931 1241 929 
1245 926 1250 923 1255 920 1259 918 1264 915 1268 912 1273 910 1277 907 1282 904 1286 902 
1291 899 1295 896 1300 894 1304 891 1309 889 1313 886 1318 883 1322 881 1327 878 1331 876 
1336 874 1340 871 1345 869 1349 866 1354 864 1358 862 1363 860 1367 857 1372 855 1376 853 
1381 851 1385 849 1390 847 1394 845 1399 843 1403 841 1408 840 1412 838 1417 836 1421 835 
1426 833 1430 832 1435 830 1439 829 1444 828 1448 827 1453 826 1457 825 1462 824 1466 823 
1471 822 1475 821 1480 821 1484 820 1489 820 1493 820 1498 819 1502 819 1507 819 1511 819 
1516 819 1520 820 1525 820 1529 820 1534 821 1538 822 1543 822 1547 823 1552 824 1556 825 
1561 826 1565 828 1570 829 1574 831 1579 832 1583 834 1588 836 1592 838 1597 840 1601 842 
1606 845 1610 847 1615 850 1619 852 1624 855 1628 858 1633 861 1637 864 1642 868 1646 871 
1651 874 1655 878 1660 882 1664 885 1669 889 1673 893 1678 897 1682 901 1687 906 1691 910 
1696 914 1700 919 1705 923 1709 928 1714 933 1718 937 1723 942 1727 947 1732 952 1736 957 
1741 962 1745 967 1750 972 1755 977 1759 982 1764 987 1768 993 1773 998 1777 1003 1782 1008 
1786 1013 1791 1018 1795 1023 1800 1028 1804 1033 1809 1038 1813 1043 1818 1048 1822 1052 1827 1057 
1831 1061 1836 1066 1840 1070 1845 1074 1849 1078 1854 1081 1858 1085 1863 1088 1867 1091 1872 1094 
1876 1097 1881 1100 1885 1102 1890 1104 1894 1105 1899 1106 1903 1107 1908 1108 1912 1108 1917 1108 
1921 1107 1926 1106 1930 1105 1935 1103 1939 1100 1944 1097 1948 1093 1953 1089 1957 1084 1962 1078 
1966 1072 1971 1065 1975 1057 1980 1049 1984 1039 1989 1029 1993 1018 1998 1007 2002 994 2007 981 
2011 967 2016 952 2020 937 2025 922 2029 906 2034 890 2038 874 2043 860 2047 846 2052 835 
2056 826 2061 820 2065 819 2070 825 2074 837 2079 858 2083 889 2088 931 2092 986 2097 1053 
2101 1134 2106 1227 2110 1331 2115 1446 2119 1568 2124 1695 2128 1825 2133 1956 2137 2085 2142 2212 
2146 2334 2151 2450 2155 2561 2160 2666 2164 2764 2169 2855 2173 2941 2178 3020 2182 3094 2187 3162 
2191 3225 2196 3284 2200 3338 2205 3388 2209 3435 2214 3478 2218 3518 2223 3554 2227 3589 2232 3620 
2236 3650 2241 3677 2245 3702 2250 3694 2255 3672 2259 3652 2264 3633 2268 3616 2273 3599 2277 3584 
2282 3570 2286 3557 2291 3545 2295 3534 2300 3524 2304 3514 2309 3505 2313 3497 2318 3489 2322 3482 
2327 3475 2331 3469 2336 3464 2340 3459 2345 3454 2349 3450 2354 3446 2358 3442 2363 3439 2367 3436 
2372 3434 2376 3432 2381 3430 2385 3428 2390 3426 2394 3425 2399 3424 2403 3423 2408 3422 2412 3422 
2417 3421 2421 3421 2426 3421 2430 3421 2435 3421 2439 3422 2444 3422 2448 3423 2453 3423 2457 3424 
2462 3425 2466 3426 2471 3427 2475 3428 2480 3429 2484 3431 2489 3432 2493 3434 2498 3435 2502 3437 
2507 3438 2511 3440 2516 3442 2520 3444 2525 3445 2529 3447 2534 3449 2538 3451 2543 3453 2547 3455 
2552 3457 2556 3459 2561 3462 2565 3464 2570 3466 2574 3468 2579 3470 2583 3473 2588 3475 2592 3477 
2597 3479 2601 3482 2606 3484 2610 3486 2615 3489 2619 3491 2624 3493 2628 3496 2633 3498 2637 3501 
2642 3503 2646 3505 2651 3508 2655 3510 2660 3513 2664 3515 2669 3517 2673 3520 2678 3522 2682 3525 
2687 3527 2691 3530 2696 3532 2700 3534 2705 3537 2709 3539 2714 3542 2718 3544 2723 3547 2727 3549 
2732 3551 2736 3554 2741 3556 2745 3559 2750 3561 2755 3563 2759 3566 2764 3568 2768 3570 2773 3573 
2777 3575 2782 3578 2786 3580 2791 3582 2795 3585 2800 3587 2804 3589 2809 3591 2813 3594 2818 3596 
2822 3598 2827 3601 2831 3603 2836 3605 2840 3607 2845 3610 2849 3612 2854 3614 2858 3616 2863 3618 
2867 3621 2872 3623 2876 3625 2881 3627 2885 3629 2890 3631 2894 3634 2899 3636 2903 3638 2908 3640 
2912 3642 2917 3644 2921 3646 2926 3648 2930 3650 2935 3652 2939 3654 2944 3656 2948 3658 2953 3660 
2957 3662 2962 3664 2966 3666 2971 3668 2975 3670 2980 3672 2984 3674 2989 3676 2993 3678 2998 3680 
3002 3682 3007 3684 3011 3686 3016 3688 3020 3689 3025 3691 3029 3693 3034 3695 3038 3697 3043 3699 
3047 3701 3052 3702 3056 3704 3061 3706 3065 3708 3070 3709 3074 3709 3079 3707 3083 3705 3088 3704 
3092 3702 3097 3700 3101 3698 3106 3697 3110 3695 3115 3693 3119 3692 3124 3690 3128 3688 3133 3687 
3137 3685 3142 3684 3146 3682 3151 3680 3155 3679 3160 3677 3164 3676 3169 3674 3173 3672 3178 3671 
3182 3669 3187 3668 3191 3666 3196 3665 3200 3663 3205 3662 3209 3660 3214 3659 3218 3657 3223 3656 
3227 3654 3232 3653 3236 3651 3241 3650 3245 3648 3250 3647 3255 3646 3259 3644 3264 3643 3268 3641 
3273 3640 3277 3639 3282 3637 3286 3636 3291 3635 3295 3633 3300 3632 3304 3630 3309 3629 3313 3628 
3318 3627 3322 3625 3327 3624 3331 3623 3336 3621 3340 3620 3345 3619 3349 3617 3354 3616 3358 3615 
3363 3614 3367 3612 3372 3611 3376 3610 3381 3609 3385 3608 3390 3606 3394 3605 3399 3604 3403 3603 
3408 3602 3412 3600 3417 3599 3421 3598 3426 3597 3430 3596 3435 3595 3439 3594 3444 3592 3448 3591 
3453 3590 3457 3589 3462 3588 3466 3587 3471 3586 3475 3585 3480 3584 3484 3582 3489 3581 3493 3580 
3498 3579 3502 3578 3507 3577 3511 3576 3516 3575 3520 3574 3525 3573 3529 3572 3534 3571 3538 3570 
3543 3569 3547 3568 3552 3567 3556 3566 3561 3565 3565 3564 3570 3563 3574 3562 3579 3561 3583 3560 
3588 3559 3592 3558 3597 3557 3601 3556 3606 3555 3610 3555 3615 3554 3619 3553 3624 3552 3628 3551 
3633 3550 3637 3549 3642 3548 3646 3547 3651 3546 3655 3546 3660 3545 3664 3544 3669 3543 3673 3542 
3678 3541 3682 3540 3687 3540 3691 3539 3696 3538 3700 3537 3705 3536 3709 3535 3714 3535 3718 3534 
3723 3533 3727 3532 3732 3531 3736 3531 3741 3530 3745 3529 3750 3528 3755 3527 3759 3527 3764 3526 
3768 3525 3773 3524 3777 3524 3782 3523 3786 3522 3791 3521 3795 3521 3800 3520 3804 3519 3809 3518 
3813 3518 3818 3517 3822 3516 3827 3516 3831 3515 3836 3514 3840 3513 3845 3513 3849 3512 3854 3511 
3858 3511 3863 3510 3867 3509 3872 3509 3876 3508 3881 3507 3885 3507 3890 3506 3894 3505 3899 3505 
3903 3504 3908 3503 3912 3503 3917 3502 3921 3501 3926 3501 3930 3500 3935 3500 3939 3499 3944 3498 
3948 3498 3953 3497 3957 3496 3962 3496 3966 3495 3971 3495 3975 3494 3980 3493 3984 3493 3989 3492 
3993 3492 3998 3491 4002 3491 4007 3490 4011 3489 4016 3489 4020 3488 4025 3488 4029 3487 4034 3487 
4038 3486 4043 3486 4047 3485 4052 3484 4056 3484 4061 3483 4065 3483 4070 3482 4074 3482 4079 3481 
4083 3481 4088 3480 4092 3480 4097 3479 4101 3479 4106 3478 4110 3478 4115 3477 4119 3477 4124 3476 
4128 3476 4133 3475 4137 3475 4142 3474 4146 3474 4151 3473 4155 3473 4160 3472 4164 3472 4169 3471 
4173 3471 4178 3470 4182 3470 4187 3470 4191 3469 4196 3469 4200 3468 4205 3468 4209 3467 4214 3467 
4218 3466 4223 3466 4227 3466 4232 3465 4236 3465 4241 3464 4245 3464 4250 3463 4255 3463 4259 3463 
4264 3462 4268 3462 4273 3461 4277 3461 4282 3461 4286 3460 4291 3460 4295 3459 4300 3459 4304 3459 
4309 3458 4313 3458 4318 3457 4322 3457 4327 3457 4331 3456 4336 3456 4340 3456 4345 3455 4349 3455 
4354 3455 4358 3454 4363 3454 4367 3453 4372 3453 4376 3453 4381 3452 4385 3452 4390 3452 4394 3451 
4399 3451 4403 3451 4408 3450 4412 3450 4417 3450 4421 3449 4426 3449 4430 3449 4435 3448 4439 3448 
4444 3448 4448 3447 4453 3447 4457 3447 4462 3446 4466 3446 4471 3446 4475 3446 4480 3445 4484 3445 
4489 3445 4493 3444 4498 3444 4502 3444 4507 3444 4511 3443 4516 3443 4520 3443 4525 3442 4529 3442 
4534 3442 4538 3442 4543 3441 4547 3441 4552 3441 4556 3440 4561 3440 4565 3440 4570 3440 4574 3439 
4579 3439 4583 3439 4588 3439 4592 3438 4597 3438 4601 3438 4606 3438 4610 3437 4615 3437 4619 3437 
4624 3437 4628 3436 4633 3436 4637 3436 4642 3436 4646 3436 4651 3435 4655 3435 4660 3435 4664 3435 
4669 3434 4673 3434 4678 3434 4682 3434 4687 3434 4691 3433 4696 3433 4700 3433 4705 3433 4709 3433 
4714 3432 4718 3432 4723 3432 4727 3432 4732 3432 4736 3431 4741 3431 4745 3431 4750 3431 4755 3431 
4759 3431 4764 3430 4768 3430 4773 3430 4777 3430 4782 3430 4786 3429 4791 3429 4795 3429 4800 3429 
4804 3429 4809 3429 4813 3428 4818 3428 4822 3428 4827 3428 4831 3428 4836 3428 4840 3428 4845 3427 
4849 3427 4854 3427 4858 3427 4863 3427 4867 3427 4872 3427 4876 3426 4881 3426 4885 3426 4890 3426 
4894 3426 4899 3426 4903 3426 4908 3426 4912 3425 4917 3425 4921 3425 4926 3425 4930 3425 4935 3425 
4939 3425 4944 3425 4948 3424 4953 3424 4957 3424 4962 3424 4966 3424 4971 3424 4975 3424 4980 3424 
4984 3424 4989 3424 4993 3423 4998 3423 5002 3423 5007 3423 5011 3423 5016 3423 5020 3423 5025 3423 
5029 3423 5034 3423 5038 3423 5043 3423 5047 3423 5052 3422 5056 3422 5061 3422 5065 3422 5070 3422 
5074 3422 5079 3422 5083 3422 5088 3422 5092 3422 5097 3422 5101 3422 5106 3422 5110 3422 5115 3422 
5119 3422 5124 3422 5128 3421 5133 3421 5137 3421 5142 3421 5146 3421 5151 3421 5155 3421 5160 3421 
5164 3421 5169 3421 5173 3421 5178 3421 5182 3421 5187 3421 5191 3421 5196 3421 5200 3421 5205 3421 
5209 3421 5214 3421 5218 3421 5223 3421 5227 3421 5232 3421 5236 3421 5241 3421 5245 3421 5250 3421 
] dogrey 
0 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
(frequenza) 5355 3737 0  0.00 [5355 3637 540 100] Show
%Latex:\myput{5355}{503}{5}{frequenza}
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
(|H\(w\)|) 570 293 0  0.00 [570 193 360 100] Show
%Latex:\myput{570}{3947}{5}{|H(w)|}
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
(frequenza) 5355 3737 0  0.00 [5355 3637 540 100] Show
%Latex:\myput{5355}{503}{5}{frequenza}
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
(|H\(w\)|) 570 293 0  0.00 [570 193 360 100] Show
%Latex:\myput{570}{3947}{5}{|H(w)|}
%Latex:\end{picture}
 showpage

 end saved restore 

