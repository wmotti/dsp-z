%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (Copyright 1995-2003 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
(-7) 697 3869 0  0.00 [697 3774 106 94] Show
%Latex:\myput{697}{371}{5}{-7}
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[1000 3710 1000 3741 
] dogrey 
(-6) 1197 3869 0  0.00 [1197 3774 106 94] Show
%Latex:\myput{1197}{371}{5}{-6}
 (drawsegs) 4 [ 32]
[1250 3710 1250 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[1500 3710 1500 3741 
] dogrey 
(-5) 1697 3869 0  0.00 [1697 3774 106 94] Show
%Latex:\myput{1697}{371}{5}{-5}
 (drawsegs) 4 [ 32]
[1750 3710 1750 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[2000 3710 2000 3741 
] dogrey 
(-4) 2197 3869 0  0.00 [2197 3774 106 94] Show
%Latex:\myput{2197}{371}{5}{-4}
 (drawsegs) 4 [ 32]
[2250 3710 2250 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[2500 3710 2500 3741 
] dogrey 
(-3) 2697 3869 0  0.00 [2697 3774 106 94] Show
%Latex:\myput{2697}{371}{5}{-3}
 (drawsegs) 4 [ 32]
[2750 3710 2750 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[3000 3710 3000 3741 
] dogrey 
(-2) 3197 3869 0  0.00 [3197 3774 106 94] Show
%Latex:\myput{3197}{371}{5}{-2}
 (drawsegs) 4 [ 32]
[3250 3710 3250 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[3500 3710 3500 3741 
] dogrey 
(-1) 3697 3869 0  0.00 [3697 3774 106 94] Show
%Latex:\myput{3697}{371}{5}{-1}
 (drawsegs) 4 [ 32]
[3750 3710 3750 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[4000 3710 4000 3741 
] dogrey 
(0) 4225 3869 0  0.00 [4225 3774 50 94] Show
%Latex:\myput{4225}{371}{5}{0}
 (drawsegs) 4 [ 32]
[4250 3710 4250 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[4500 3710 4500 3741 
] dogrey 
(1) 4725 3869 0  0.00 [4725 3774 50 94] Show
%Latex:\myput{4725}{371}{5}{1}
 (drawsegs) 4 [ 32]
[4750 3710 4750 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[5000 3710 5000 3741 
] dogrey 
(2) 5225 3869 0  0.00 [5225 3774 50 94] Show
%Latex:\myput{5225}{371}{5}{2}
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
(-3) 572 3746 0  0.00 [572 3651 106 94] Show
%Latex:\myput{572}{494}{5}{-3}
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3445 720 3445 
] dogrey 
(-2) 572 3216 0  0.00 [572 3121 106 94] Show
%Latex:\myput{572}{1024}{5}{-2}
 (drawsegs) 4 [ 32]
[750 3180 690 3180 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2915 720 2915 
] dogrey 
(-1) 572 2686 0  0.00 [572 2591 106 94] Show
%Latex:\myput{572}{1554}{5}{-1}
 (drawsegs) 4 [ 32]
[750 2650 690 2650 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2385 720 2385 
] dogrey 
(0) 628 2156 0  0.00 [628 2061 50 94] Show
%Latex:\myput{628}{2084}{5}{0}
 (drawsegs) 4 [ 32]
[750 2120 690 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1855 720 1855 
] dogrey 
(1) 628 1626 0  0.00 [628 1531 50 94] Show
%Latex:\myput{628}{2614}{5}{1}
 (drawsegs) 4 [ 32]
[750 1590 690 1590 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1325 720 1325 
] dogrey 
(2) 628 1096 0  0.00 [628 1001 50 94] Show
%Latex:\myput{628}{3144}{5}{2}
 (drawsegs) 4 [ 32]
[750 1060 690 1060 
] dogrey 
 (drawsegs) 4 [ 32]
[750 795 720 795 
] dogrey 
(3) 628 566 0  0.00 [628 471 50 94] Show
%Latex:\myput{628}{3674}{5}{3}
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
[] 0 setdash
32 Setcolor
0 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 2 [ 0]
[4250 2120 
] dogrey 
0 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#4f put
 (drawpolymark) 36 [ 31]
[1249 2120 4058 1122 4058 3118 4737 1771 4737 2469 4743 2030 4743 2210 4662 1820 4662 2420 4602 1868 
4602 2372 3620 2120 3763 2000 3763 2240 3750 2120 3853 2120 4198 1850 4198 2390 
] dogrey 
/absolu true def
/Times-Roman findfont 100 scf mul scalefont setfont
-1 -1 200000 200000 setclipzone
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
[] 0 setdash
32 Setcolor
32 Setcolor
(Zeros) 3450 4227 0  0.00 [3450 4127 300 100] Show
%Latex:\myput{3450}{13}{5}{Zeros}
32 Setcolor
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#4f put
 (drawpolymark) 2 [ 31]
[3375 4190 
] dogrey 
/absolu true def
/Courier findfont 100 scf mul scalefont setfont
[] 0 setdash
32 Setcolor
[] 0 setdash
32 Setcolor
32 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#b4 put
 (drawpolymark) 36 [ 31]
[4171 2091 4171 2149 4184 2066 4184 2174 4333 2105 4333 2135 4324 2077 4324 2163 4307 2054 4307 2186 
4283 2038 4283 2202 4204 2046 4204 2194 4256 2032 4256 2208 4229 2034 4229 2206 
] dogrey 
/absolu true def
/Courier findfont 100 scf mul scalefont setfont
-1 -1 200000 200000 setclipzone
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
[] 0 setdash
32 Setcolor
32 Setcolor
(Poles) 3450 4227 0  0.00 [3450 4127 300 100] Show
%Latex:\myput{3450}{13}{5}{Poles}
32 Setcolor
/Symbol findfont 100 scf mul scalefont setfont
HardMark 0 16#b4 put
 (drawpolymark) 2 [ 31]
[3375 4190 
] dogrey 
/absolu true def
/Courier findfont 100 scf mul scalefont setfont
[] 0 setdash
32 Setcolor
[] 0 setdash
32 Setcolor
3 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 4 [ 0]
[949 2120 4800 2120 
] dogrey 
3 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
3 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 4 [ 0]
[4250 3473 4250 767 
] dogrey 
3 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
 (fillarc) 6 [ 32]
[3750 1590 1000 1060 0 23040 
] dogrey 
32 Setcolor
-1 -1 200000 200000 setclipzone
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
(transmission zeros and poles) 2160 292 0  0.00 [2160 192 1680 100] Show
%Latex:\myput{2160}{3948}{5}{transmission zeros and poles}
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
(real axis) 5355 3737 0  0.00 [5355 3637 540 100] Show
%Latex:\myput{5355}{503}{5}{real axis}
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
(imag. axis) 450 293 0  0.00 [450 193 600 100] Show
%Latex:\myput{450}{3947}{5}{imag. axis}
%Latex:\end{picture}
 showpage

 end saved restore 

