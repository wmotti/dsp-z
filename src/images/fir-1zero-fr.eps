%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (Copyright 1995-2003 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
(-0.5) 660 3869 0  0.00 [660 3774 181 94] Show
%Latex:\myput{660}{371}{5}{-0.5}
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[975 3710 975 3741 
] dogrey 
(-0.4) 1110 3869 0  0.00 [1110 3774 181 94] Show
%Latex:\myput{1110}{371}{5}{-0.4}
 (drawsegs) 4 [ 32]
[1200 3710 1200 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[1425 3710 1425 3741 
] dogrey 
(-0.3) 1560 3869 0  0.00 [1560 3774 181 94] Show
%Latex:\myput{1560}{371}{5}{-0.3}
 (drawsegs) 4 [ 32]
[1650 3710 1650 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[1875 3710 1875 3741 
] dogrey 
(-0.2) 2010 3869 0  0.00 [2010 3774 181 94] Show
%Latex:\myput{2010}{371}{5}{-0.2}
 (drawsegs) 4 [ 32]
[2100 3710 2100 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[2325 3710 2325 3741 
] dogrey 
(-0.1) 2460 3869 0  0.00 [2460 3774 181 94] Show
%Latex:\myput{2460}{371}{5}{-0.1}
 (drawsegs) 4 [ 32]
[2550 3710 2550 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[2775 3710 2775 3741 
] dogrey 
(0.0) 2938 3869 0  0.00 [2938 3774 125 94] Show
%Latex:\myput{2938}{371}{5}{0.0}
 (drawsegs) 4 [ 32]
[3000 3710 3000 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[3225 3710 3225 3741 
] dogrey 
(0.1) 3388 3869 0  0.00 [3388 3774 125 94] Show
%Latex:\myput{3388}{371}{5}{0.1}
 (drawsegs) 4 [ 32]
[3450 3710 3450 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[3675 3710 3675 3741 
] dogrey 
(0.2) 3838 3869 0  0.00 [3838 3774 125 94] Show
%Latex:\myput{3838}{371}{5}{0.2}
 (drawsegs) 4 [ 32]
[3900 3710 3900 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[4125 3710 4125 3741 
] dogrey 
(0.3) 4288 3869 0  0.00 [4288 3774 125 94] Show
%Latex:\myput{4288}{371}{5}{0.3}
 (drawsegs) 4 [ 32]
[4350 3710 4350 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[4575 3710 4575 3741 
] dogrey 
(0.4) 4738 3869 0  0.00 [4738 3774 125 94] Show
%Latex:\myput{4738}{371}{5}{0.4}
 (drawsegs) 4 [ 32]
[4800 3710 4800 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[5025 3710 5025 3741 
] dogrey 
(0.5) 5188 3869 0  0.00 [5188 3774 125 94] Show
%Latex:\myput{5188}{371}{5}{0.5}
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
(0.0) 553 3746 0  0.00 [553 3651 125 94] Show
%Latex:\myput{553}{494}{5}{0.0}
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3551 720 3551 
] dogrey 
(0.2) 553 3428 0  0.00 [553 3333 125 94] Show
%Latex:\myput{553}{812}{5}{0.2}
 (drawsegs) 4 [ 32]
[750 3392 690 3392 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3233 720 3233 
] dogrey 
(0.4) 553 3110 0  0.00 [553 3015 125 94] Show
%Latex:\myput{553}{1130}{5}{0.4}
 (drawsegs) 4 [ 32]
[750 3074 690 3074 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2915 720 2915 
] dogrey 
(0.6) 553 2792 0  0.00 [553 2697 125 94] Show
%Latex:\myput{553}{1448}{5}{0.6}
 (drawsegs) 4 [ 32]
[750 2756 690 2756 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2597 720 2597 
] dogrey 
(0.8) 553 2474 0  0.00 [553 2379 125 94] Show
%Latex:\myput{553}{1766}{5}{0.8}
 (drawsegs) 4 [ 32]
[750 2438 690 2438 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2279 720 2279 
] dogrey 
(1.0) 553 2156 0  0.00 [553 2061 125 94] Show
%Latex:\myput{553}{2084}{5}{1.0}
 (drawsegs) 4 [ 32]
[750 2120 690 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1961 720 1961 
] dogrey 
(1.2) 553 1838 0  0.00 [553 1743 125 94] Show
%Latex:\myput{553}{2402}{5}{1.2}
 (drawsegs) 4 [ 32]
[750 1802 690 1802 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1643 720 1643 
] dogrey 
(1.4) 553 1520 0  0.00 [553 1425 125 94] Show
%Latex:\myput{553}{2720}{5}{1.4}
 (drawsegs) 4 [ 32]
[750 1484 690 1484 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1325 720 1325 
] dogrey 
(1.6) 553 1202 0  0.00 [553 1107 125 94] Show
%Latex:\myput{553}{3038}{5}{1.6}
 (drawsegs) 4 [ 32]
[750 1166 690 1166 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1007 720 1007 
] dogrey 
(1.8) 553 884 0  0.00 [553 789 125 94] Show
%Latex:\myput{553}{3356}{5}{1.8}
 (drawsegs) 4 [ 32]
[750 848 690 848 
] dogrey 
 (drawsegs) 4 [ 32]
[750 689 720 689 
] dogrey 
(2.0) 553 566 0  0.00 [553 471 125 94] Show
%Latex:\myput{553}{3674}{5}{2.0}
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
[] 0 setdash
32 Setcolor
0 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 2002 [ 0]
[750 530 755 530 759 530 764 530 768 530 773 530 777 531 782 531 786 531 791 531 
795 532 800 532 804 532 809 533 813 533 818 534 822 534 827 535 831 535 836 536 
840 536 845 537 849 538 854 538 858 539 863 540 867 541 872 541 876 542 881 543 
885 544 890 545 894 546 898 547 903 548 907 549 912 550 916 551 921 553 925 554 
930 555 934 556 939 558 943 559 948 560 952 562 957 563 961 565 966 566 970 568 
975 569 979 571 984 572 988 574 993 576 997 577 1002 579 1006 581 1011 583 1015 584 
1020 586 1024 588 1029 590 1034 592 1038 594 1043 596 1047 598 1052 600 1056 602 1061 604 
1065 607 1070 609 1074 611 1079 613 1083 616 1088 618 1092 620 1097 623 1101 625 1106 627 
1110 630 1115 632 1119 635 1124 637 1128 640 1133 643 1137 645 1142 648 1146 651 1151 653 
1155 656 1160 659 1164 662 1169 665 1173 668 1178 671 1182 674 1186 677 1191 680 1195 683 
1200 686 1204 689 1209 692 1213 695 1218 698 1222 701 1227 705 1231 708 1236 711 1240 715 
1245 718 1249 721 1254 725 1258 728 1263 732 1267 735 1272 739 1276 742 1281 746 1285 750 
1290 753 1294 757 1299 761 1303 764 1308 768 1313 772 1317 776 1322 780 1326 784 1331 788 
1335 792 1340 796 1344 800 1349 804 1353 808 1358 812 1362 816 1367 820 1371 824 1376 828 
1380 833 1385 837 1389 841 1394 846 1398 850 1403 854 1407 859 1412 863 1416 868 1421 872 
1425 877 1430 881 1434 886 1439 890 1443 895 1448 900 1452 904 1457 909 1461 914 1466 919 
1470 923 1474 928 1479 933 1483 938 1488 943 1492 948 1497 953 1501 958 1506 963 1510 968 
1515 973 1519 978 1524 983 1528 988 1533 993 1537 999 1542 1004 1546 1009 1551 1014 1555 1020 
1560 1025 1564 1030 1569 1036 1573 1041 1578 1047 1582 1052 1587 1058 1591 1063 1596 1069 1601 1074 
1605 1080 1610 1086 1614 1091 1619 1097 1623 1103 1628 1108 1632 1114 1637 1120 1641 1126 1646 1131 
1650 1137 1655 1143 1659 1149 1664 1155 1668 1161 1673 1167 1677 1173 1682 1179 1686 1185 1691 1191 
1695 1197 1700 1203 1704 1210 1709 1216 1713 1222 1718 1228 1722 1234 1727 1241 1731 1247 1736 1253 
1740 1260 1745 1266 1749 1273 1754 1279 1758 1285 1762 1292 1767 1298 1771 1305 1776 1311 1780 1318 
1785 1325 1789 1331 1794 1338 1798 1345 1803 1351 1807 1358 1812 1365 1816 1371 1821 1378 1825 1385 
1830 1392 1834 1399 1839 1406 1843 1412 1848 1419 1852 1426 1857 1433 1861 1440 1866 1447 1870 1454 
1875 1461 1880 1468 1884 1476 1889 1483 1893 1490 1898 1497 1902 1504 1907 1511 1911 1519 1916 1526 
1920 1533 1925 1540 1929 1548 1934 1555 1938 1562 1943 1570 1947 1577 1952 1585 1956 1592 1961 1600 
1965 1607 1970 1615 1974 1622 1978 1630 1983 1637 1987 1645 1992 1652 1996 1660 2001 1668 2005 1675 
2010 1683 2014 1691 2019 1698 2024 1706 2028 1714 2033 1722 2037 1730 2042 1737 2046 1745 2051 1753 
2055 1761 2060 1769 2064 1777 2069 1785 2073 1793 2078 1801 2082 1809 2087 1817 2091 1825 2096 1833 
2100 1841 2105 1849 2109 1857 2114 1865 2118 1873 2122 1881 2127 1890 2131 1898 2136 1906 2140 1914 
2145 1923 2149 1931 2154 1939 2159 1947 2163 1956 2168 1964 2172 1972 2177 1981 2181 1989 2186 1998 
2190 2006 2195 2015 2199 2023 2204 2031 2208 2040 2213 2048 2217 2057 2222 2066 2226 2074 2231 2083 
2235 2091 2240 2100 2244 2108 2249 2117 2253 2126 2258 2134 2262 2143 2266 2152 2271 2161 2275 2169 
2280 2178 2284 2187 2289 2196 2293 2204 2298 2213 2303 2222 2307 2231 2312 2240 2316 2249 2321 2257 
2325 2266 2330 2275 2334 2284 2339 2293 2343 2302 2348 2311 2352 2320 2357 2329 2361 2338 2366 2347 
2370 2356 2375 2365 2379 2374 2384 2383 2388 2392 2393 2401 2397 2410 2402 2420 2406 2429 2410 2438 
2415 2447 2419 2456 2424 2465 2428 2475 2433 2484 2438 2493 2442 2502 2447 2512 2451 2521 2456 2530 
2460 2539 2465 2549 2469 2558 2474 2567 2478 2577 2483 2586 2487 2595 2492 2605 2496 2614 2501 2623 
2505 2633 2510 2642 2514 2652 2519 2661 2523 2670 2528 2680 2532 2689 2537 2699 2541 2708 2546 2718 
2550 2727 2555 2737 2559 2746 2564 2756 2568 2765 2573 2775 2577 2785 2582 2794 2586 2804 2591 2813 
2595 2823 2600 2832 2604 2842 2609 2852 2613 2861 2618 2871 2622 2881 2627 2890 2631 2900 2636 2909 
2640 2919 2645 2929 2649 2939 2654 2948 2658 2958 2663 2968 2667 2977 2672 2987 2676 2997 2681 3007 
2685 3016 2690 3026 2694 3036 2699 3046 2703 3055 2708 3065 2712 3075 2717 3085 2721 3095 2726 3104 
2730 3114 2735 3124 2739 3134 2744 3144 2748 3153 2753 3163 2757 3173 2762 3183 2766 3193 2771 3203 
2775 3213 2780 3222 2784 3232 2789 3242 2793 3252 2798 3262 2802 3272 2807 3282 2811 3292 2816 3302 
2820 3311 2825 3321 2829 3331 2834 3341 2838 3351 2843 3361 2847 3371 2852 3381 2856 3391 2861 3401 
2865 3411 2870 3421 2874 3431 2879 3441 2883 3451 2888 3461 2892 3470 2897 3480 2901 3490 2906 3500 
2910 3510 2915 3520 2919 3530 2924 3540 2928 3550 2933 3560 2937 3570 2942 3580 2946 3590 2951 3600 
2955 3610 2960 3620 2964 3630 2969 3640 2973 3650 2978 3660 2982 3670 2987 3680 2991 3690 2996 3700 
3000 3710 3005 3700 3009 3690 3014 3680 3018 3670 3023 3660 3027 3650 3032 3640 3036 3630 3041 3620 
3045 3610 3050 3600 3054 3590 3059 3580 3063 3570 3068 3560 3072 3550 3077 3540 3081 3530 3086 3520 
3090 3510 3095 3500 3099 3490 3104 3480 3108 3470 3113 3461 3117 3451 3122 3441 3126 3431 3131 3421 
3135 3411 3140 3401 3144 3391 3149 3381 3153 3371 3158 3361 3162 3351 3167 3341 3171 3331 3176 3321 
3180 3311 3185 3302 3189 3292 3194 3282 3198 3272 3203 3262 3207 3252 3212 3242 3216 3232 3221 3222 
3225 3213 3230 3203 3234 3193 3239 3183 3243 3173 3248 3163 3252 3153 3257 3144 3261 3134 3266 3124 
3270 3114 3275 3104 3279 3095 3284 3085 3288 3075 3293 3065 3297 3055 3302 3046 3306 3036 3311 3026 
3315 3016 3320 3007 3324 2997 3329 2987 3333 2977 3338 2968 3342 2958 3347 2948 3351 2939 3356 2929 
3360 2919 3365 2909 3369 2900 3374 2890 3378 2881 3383 2871 3387 2861 3392 2852 3396 2842 3401 2832 
3405 2823 3410 2813 3414 2804 3419 2794 3423 2785 3428 2775 3432 2765 3437 2756 3441 2746 3446 2737 
3450 2727 3455 2718 3459 2708 3464 2699 3468 2689 3473 2680 3477 2670 3482 2661 3486 2652 3491 2642 
3495 2633 3500 2623 3504 2614 3509 2605 3513 2595 3518 2586 3522 2577 3527 2567 3531 2558 3536 2549 
3540 2539 3545 2530 3549 2521 3554 2512 3558 2502 3563 2493 3567 2484 3572 2475 3576 2465 3581 2456 
3585 2447 3590 2438 3594 2429 3599 2420 3603 2410 3608 2401 3612 2392 3617 2383 3621 2374 3626 2365 
3630 2356 3635 2347 3639 2338 3644 2329 3648 2320 3653 2311 3657 2302 3662 2293 3666 2284 3671 2275 
3675 2266 3680 2257 3684 2249 3689 2240 3693 2231 3698 2222 3702 2213 3707 2204 3711 2196 3716 2187 
3720 2178 3725 2169 3729 2161 3734 2152 3738 2143 3743 2134 3747 2126 3752 2117 3756 2108 3761 2100 
3765 2091 3770 2083 3774 2074 3779 2066 3783 2057 3788 2048 3792 2040 3797 2031 3801 2023 3806 2015 
3810 2006 3815 1998 3819 1989 3824 1981 3828 1972 3833 1964 3837 1956 3842 1947 3846 1939 3851 1931 
3855 1923 3860 1914 3864 1906 3869 1898 3873 1890 3878 1881 3882 1873 3887 1865 3891 1857 3896 1849 
3900 1841 3905 1833 3909 1825 3914 1817 3918 1809 3923 1801 3927 1793 3932 1785 3936 1777 3941 1769 
3945 1761 3950 1753 3954 1745 3959 1737 3963 1730 3968 1722 3972 1714 3977 1706 3981 1698 3986 1691 
3990 1683 3995 1675 3999 1668 4004 1660 4008 1652 4013 1645 4017 1637 4022 1630 4026 1622 4031 1615 
4035 1607 4040 1600 4044 1592 4049 1585 4053 1577 4058 1570 4062 1562 4067 1555 4071 1548 4076 1540 
4080 1533 4085 1526 4089 1519 4094 1511 4098 1504 4103 1497 4107 1490 4112 1483 4116 1476 4121 1468 
4125 1461 4130 1454 4134 1447 4139 1440 4143 1433 4148 1426 4152 1419 4157 1412 4161 1406 4166 1399 
4170 1392 4175 1385 4179 1378 4184 1371 4188 1365 4193 1358 4197 1351 4202 1345 4206 1338 4211 1331 
4215 1325 4220 1318 4224 1311 4229 1305 4233 1298 4238 1292 4242 1285 4247 1279 4251 1273 4256 1266 
4260 1260 4265 1253 4269 1247 4274 1241 4278 1234 4283 1228 4287 1222 4292 1216 4296 1210 4301 1203 
4305 1197 4310 1191 4314 1185 4319 1179 4323 1173 4328 1167 4332 1161 4337 1155 4341 1149 4346 1143 
4350 1137 4354 1131 4359 1126 4363 1120 4368 1114 4372 1108 4377 1103 4381 1097 4386 1091 4390 1086 
4395 1080 4399 1074 4404 1069 4409 1063 4413 1058 4418 1052 4422 1047 4427 1041 4431 1036 4436 1030 
4440 1025 4445 1020 4449 1014 4454 1009 4458 1004 4463 999 4467 993 4472 988 4476 983 4481 978 
4485 973 4490 968 4494 963 4499 958 4503 953 4508 948 4512 943 4517 938 4521 933 4526 928 
4530 923 4535 919 4539 914 4544 909 4548 904 4553 900 4557 895 4562 890 4566 886 4571 881 
4575 877 4580 872 4584 868 4589 863 4593 859 4598 854 4602 850 4607 846 4611 841 4616 837 
4620 833 4625 828 4629 824 4634 820 4638 816 4642 812 4647 808 4651 804 4656 800 4660 796 
4665 792 4669 788 4674 784 4678 780 4683 776 4688 772 4692 768 4697 764 4701 761 4706 757 
4710 753 4715 750 4719 746 4724 742 4728 739 4733 735 4737 732 4742 728 4746 725 4751 721 
4755 718 4760 715 4764 711 4769 708 4773 705 4778 701 4782 698 4787 695 4791 692 4796 689 
4800 686 4805 683 4809 680 4814 677 4818 674 4823 671 4827 668 4832 665 4836 662 4841 659 
4845 656 4850 653 4854 651 4859 648 4863 645 4868 643 4872 640 4877 637 4881 635 4886 632 
4890 630 4895 627 4899 625 4904 623 4908 620 4913 618 4917 616 4922 613 4926 611 4930 609 
4935 607 4939 604 4944 602 4948 600 4953 598 4957 596 4962 594 4966 592 4971 590 4976 588 
4980 586 4985 584 4989 583 4994 581 4998 579 5003 577 5007 576 5012 574 5016 572 5021 571 
5025 569 5030 568 5034 566 5039 565 5043 563 5048 562 5052 560 5057 559 5061 558 5066 556 
5070 555 5075 554 5079 553 5084 551 5088 550 5093 549 5097 548 5102 547 5106 546 5111 545 
5115 544 5120 543 5124 542 5129 541 5133 541 5138 540 5142 539 5147 538 5151 538 5156 537 
5160 536 5165 536 5169 535 5174 535 5178 534 5183 534 5187 533 5192 533 5196 532 5201 532 
5205 532 5210 531 5214 531 5218 531 5223 531 5227 530 5232 530 5236 530 5241 530 5245 530 
5250 530 
] dogrey 
0 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
%Latex:\end{picture}
 showpage

 end saved restore 

