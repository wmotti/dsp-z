%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox:  0 0 300 212
%%
%%Scilab Postscript File (Copyright 1995-2003 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[0.5 10 div 0 0 0.5 10 div neg  0 2120 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
(0.0) 688 3869 0  0.00 [688 3774 125 94] Show
%Latex:\myput{688}{371}{5}{0.0}
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[1200 3710 1200 3741 
] dogrey 
(0.1) 1588 3869 0  0.00 [1588 3774 125 94] Show
%Latex:\myput{1588}{371}{5}{0.1}
 (drawsegs) 4 [ 32]
[1650 3710 1650 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[2100 3710 2100 3741 
] dogrey 
(0.2) 2488 3869 0  0.00 [2488 3774 125 94] Show
%Latex:\myput{2488}{371}{5}{0.2}
 (drawsegs) 4 [ 32]
[2550 3710 2550 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[3000 3710 3000 3741 
] dogrey 
(0.3) 3388 3869 0  0.00 [3388 3774 125 94] Show
%Latex:\myput{3388}{371}{5}{0.3}
 (drawsegs) 4 [ 32]
[3450 3710 3450 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[3900 3710 3900 3741 
] dogrey 
(0.4) 4288 3869 0  0.00 [4288 3774 125 94] Show
%Latex:\myput{4288}{371}{5}{0.4}
 (drawsegs) 4 [ 32]
[4350 3710 4350 3773 
] dogrey 
 (drawsegs) 4 [ 32]
[4800 3710 4800 3741 
] dogrey 
(0.5) 5188 3869 0  0.00 [5188 3774 125 94] Show
%Latex:\myput{5188}{371}{5}{0.5}
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
(-3.2) 497 3746 0  0.00 [497 3651 181 94] Show
%Latex:\myput{497}{494}{5}{-3.2}
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3511 720 3511 
] dogrey 
(-2.8) 497 3349 0  0.00 [497 3254 181 94] Show
%Latex:\myput{497}{891}{5}{-2.8}
 (drawsegs) 4 [ 32]
[750 3313 690 3313 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3114 720 3114 
] dogrey 
(-2.4) 497 2951 0  0.00 [497 2856 181 94] Show
%Latex:\myput{497}{1289}{5}{-2.4}
 (drawsegs) 4 [ 32]
[750 2915 690 2915 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2716 720 2716 
] dogrey 
(-2.0) 497 2554 0  0.00 [497 2459 181 94] Show
%Latex:\myput{497}{1686}{5}{-2.0}
 (drawsegs) 4 [ 32]
[750 2518 690 2518 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2319 720 2319 
] dogrey 
(-1.6) 497 2156 0  0.00 [497 2061 181 94] Show
%Latex:\myput{497}{2084}{5}{-1.6}
 (drawsegs) 4 [ 32]
[750 2120 690 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1921 720 1921 
] dogrey 
(-1.2) 497 1759 0  0.00 [497 1664 181 94] Show
%Latex:\myput{497}{2481}{5}{-1.2}
 (drawsegs) 4 [ 32]
[750 1723 690 1723 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1524 720 1524 
] dogrey 
(-0.8) 497 1361 0  0.00 [497 1266 181 94] Show
%Latex:\myput{497}{2879}{5}{-0.8}
 (drawsegs) 4 [ 32]
[750 1325 690 1325 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1126 720 1126 
] dogrey 
(-0.4) 497 964 0  0.00 [497 869 181 94] Show
%Latex:\myput{497}{3276}{5}{-0.4}
 (drawsegs) 4 [ 32]
[750 928 690 928 
] dogrey 
 (drawsegs) 4 [ 32]
[750 729 720 729 
] dogrey 
(0.0) 553 566 0  0.00 [553 471 125 94] Show
%Latex:\myput{553}{3674}{5}{0.0}
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
[] 0 setdash
32 Setcolor
0 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 102 [ 0]
[750 530 840 551 930 571 1020 592 1110 611 1200 630 1290 649 1380 666 1470 682 1560 697 
1650 711 1740 724 1830 735 1920 745 2010 754 2100 761 2190 768 2280 773 2370 776 2460 779 
2550 781 2640 781 2730 781 2820 779 2910 777 3000 773 3090 769 3180 765 3270 759 3360 753 
3450 746 3540 738 3630 730 3720 722 3810 713 3900 703 3990 694 4080 683 4170 673 4260 662 
4350 651 4440 639 4530 628 4620 616 4710 604 4800 592 4890 580 4980 567 5070 555 5160 542 
5250 530 
] dogrey 
0 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
1 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 102 [ 0]
[750 530 840 592 930 653 1020 711 1110 765 1200 815 1290 859 1380 898 1470 932 1560 961 
1650 986 1740 1005 1830 1021 1920 1033 2010 1041 2100 1047 2190 1050 2280 1050 2370 1048 2460 1045 
2550 1039 2640 1032 2730 1024 2820 1014 2910 1003 3000 991 3090 978 3180 964 3270 949 3360 934 
3450 918 3540 902 3630 885 3720 867 3810 849 3900 831 3990 812 4080 793 4170 774 4260 755 
4350 735 4440 715 4530 695 4620 675 4710 654 4800 634 4890 613 4980 592 5070 572 5160 551 
5250 530 
] dogrey 
1 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
2 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 102 [ 0]
[750 530 840 714 930 880 1020 1017 1110 1125 1200 1206 1290 1265 1380 1307 1470 1337 1560 1356 
1650 1367 1740 1372 1830 1372 1920 1368 2010 1361 2100 1351 2190 1339 2280 1325 2370 1309 2460 1292 
2550 1274 2640 1254 2730 1234 2820 1213 2910 1192 3000 1169 3090 1147 3180 1124 3270 1100 3360 1076 
3450 1052 3540 1027 3630 1002 3720 977 3810 952 3900 926 3990 900 4080 874 4170 848 4260 822 
4350 796 4440 770 4530 743 4620 717 4710 690 4800 664 4890 637 4980 610 5070 584 5160 557 
5250 530 
] dogrey 
2 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
4 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
/closeflag false def
 (drawpoly) 102 [ 0]
[750 3652 840 3347 930 3078 1020 2858 1110 2683 1200 2543 1290 2428 1380 2331 1470 2247 1560 2173 
1650 2106 1740 2045 1830 1988 1920 1935 2010 1884 2100 1836 2190 1790 2280 1745 2370 1701 2460 1659 
2550 1617 2640 1577 2730 1537 2820 1498 2910 1459 3000 1420 3090 1383 3180 1345 3270 1308 3360 1271 
3450 1234 3540 1198 3630 1162 3720 1126 3810 1090 3900 1054 3990 1019 4080 984 4170 948 4260 913 
4350 878 4440 843 4530 808 4620 773 4710 738 4800 704 4890 669 4980 634 5070 599 5160 565 
5250 530 
] dogrey 
4 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
/Courier findfont 100 scf mul scalefont setfont
(Fase del filtro in funzione della frequenza normalizzata) 1320 292 0  0.00 [1320 192 3360 100] Show
%Latex:\myput{1320}{3948}{5}{Fase del filtro in funzione della frequenza normalizzata}
%Latex:\end{picture}
 showpage

 end saved restore 

